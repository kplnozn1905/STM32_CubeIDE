
Class_15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002d44  08002d44  00012d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db8  08002db8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dc0  08002dc0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc0  08002dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000005c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006357  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013a3  00000000  00000000  000263fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004b0  00000000  00000000  000277a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000408  00000000  00000000  00027c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ffec  00000000  00000000  00028058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005bec  00000000  00000000  00048044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0670  00000000  00000000  0004dc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010e2a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000158c  00000000  00000000  0010e2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002d2c 	.word	0x08002d2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08002d2c 	.word	0x08002d2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b96e 	b.w	8000b70 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468c      	mov	ip, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f040 8083 	bne.w	80009c2 <__udivmoddi4+0x116>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4617      	mov	r7, r2
 80008c0:	d947      	bls.n	8000952 <__udivmoddi4+0xa6>
 80008c2:	fab2 f282 	clz	r2, r2
 80008c6:	b142      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c8:	f1c2 0020 	rsb	r0, r2, #32
 80008cc:	fa24 f000 	lsr.w	r0, r4, r0
 80008d0:	4091      	lsls	r1, r2
 80008d2:	4097      	lsls	r7, r2
 80008d4:	ea40 0c01 	orr.w	ip, r0, r1
 80008d8:	4094      	lsls	r4, r2
 80008da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008de:	0c23      	lsrs	r3, r4, #16
 80008e0:	fbbc f6f8 	udiv	r6, ip, r8
 80008e4:	fa1f fe87 	uxth.w	lr, r7
 80008e8:	fb08 c116 	mls	r1, r8, r6, ip
 80008ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f0:	fb06 f10e 	mul.w	r1, r6, lr
 80008f4:	4299      	cmp	r1, r3
 80008f6:	d909      	bls.n	800090c <__udivmoddi4+0x60>
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80008fe:	f080 8119 	bcs.w	8000b34 <__udivmoddi4+0x288>
 8000902:	4299      	cmp	r1, r3
 8000904:	f240 8116 	bls.w	8000b34 <__udivmoddi4+0x288>
 8000908:	3e02      	subs	r6, #2
 800090a:	443b      	add	r3, r7
 800090c:	1a5b      	subs	r3, r3, r1
 800090e:	b2a4      	uxth	r4, r4
 8000910:	fbb3 f0f8 	udiv	r0, r3, r8
 8000914:	fb08 3310 	mls	r3, r8, r0, r3
 8000918:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800091c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000920:	45a6      	cmp	lr, r4
 8000922:	d909      	bls.n	8000938 <__udivmoddi4+0x8c>
 8000924:	193c      	adds	r4, r7, r4
 8000926:	f100 33ff 	add.w	r3, r0, #4294967295
 800092a:	f080 8105 	bcs.w	8000b38 <__udivmoddi4+0x28c>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f240 8102 	bls.w	8000b38 <__udivmoddi4+0x28c>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800093c:	eba4 040e 	sub.w	r4, r4, lr
 8000940:	2600      	movs	r6, #0
 8000942:	b11d      	cbz	r5, 800094c <__udivmoddi4+0xa0>
 8000944:	40d4      	lsrs	r4, r2
 8000946:	2300      	movs	r3, #0
 8000948:	e9c5 4300 	strd	r4, r3, [r5]
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	b902      	cbnz	r2, 8000956 <__udivmoddi4+0xaa>
 8000954:	deff      	udf	#255	; 0xff
 8000956:	fab2 f282 	clz	r2, r2
 800095a:	2a00      	cmp	r2, #0
 800095c:	d150      	bne.n	8000a00 <__udivmoddi4+0x154>
 800095e:	1bcb      	subs	r3, r1, r7
 8000960:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000964:	fa1f f887 	uxth.w	r8, r7
 8000968:	2601      	movs	r6, #1
 800096a:	fbb3 fcfe 	udiv	ip, r3, lr
 800096e:	0c21      	lsrs	r1, r4, #16
 8000970:	fb0e 331c 	mls	r3, lr, ip, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb08 f30c 	mul.w	r3, r8, ip
 800097c:	428b      	cmp	r3, r1
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0xe4>
 8000980:	1879      	adds	r1, r7, r1
 8000982:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0xe2>
 8000988:	428b      	cmp	r3, r1
 800098a:	f200 80e9 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 800098e:	4684      	mov	ip, r0
 8000990:	1ac9      	subs	r1, r1, r3
 8000992:	b2a3      	uxth	r3, r4
 8000994:	fbb1 f0fe 	udiv	r0, r1, lr
 8000998:	fb0e 1110 	mls	r1, lr, r0, r1
 800099c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009a0:	fb08 f800 	mul.w	r8, r8, r0
 80009a4:	45a0      	cmp	r8, r4
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x10c>
 80009a8:	193c      	adds	r4, r7, r4
 80009aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x10a>
 80009b0:	45a0      	cmp	r8, r4
 80009b2:	f200 80d9 	bhi.w	8000b68 <__udivmoddi4+0x2bc>
 80009b6:	4618      	mov	r0, r3
 80009b8:	eba4 0408 	sub.w	r4, r4, r8
 80009bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009c0:	e7bf      	b.n	8000942 <__udivmoddi4+0x96>
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d909      	bls.n	80009da <__udivmoddi4+0x12e>
 80009c6:	2d00      	cmp	r5, #0
 80009c8:	f000 80b1 	beq.w	8000b2e <__udivmoddi4+0x282>
 80009cc:	2600      	movs	r6, #0
 80009ce:	e9c5 0100 	strd	r0, r1, [r5]
 80009d2:	4630      	mov	r0, r6
 80009d4:	4631      	mov	r1, r6
 80009d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009da:	fab3 f683 	clz	r6, r3
 80009de:	2e00      	cmp	r6, #0
 80009e0:	d14a      	bne.n	8000a78 <__udivmoddi4+0x1cc>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d302      	bcc.n	80009ec <__udivmoddi4+0x140>
 80009e6:	4282      	cmp	r2, r0
 80009e8:	f200 80b8 	bhi.w	8000b5c <__udivmoddi4+0x2b0>
 80009ec:	1a84      	subs	r4, r0, r2
 80009ee:	eb61 0103 	sbc.w	r1, r1, r3
 80009f2:	2001      	movs	r0, #1
 80009f4:	468c      	mov	ip, r1
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d0a8      	beq.n	800094c <__udivmoddi4+0xa0>
 80009fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80009fe:	e7a5      	b.n	800094c <__udivmoddi4+0xa0>
 8000a00:	f1c2 0320 	rsb	r3, r2, #32
 8000a04:	fa20 f603 	lsr.w	r6, r0, r3
 8000a08:	4097      	lsls	r7, r2
 8000a0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a12:	40d9      	lsrs	r1, r3
 8000a14:	4330      	orrs	r0, r6
 8000a16:	0c03      	lsrs	r3, r0, #16
 8000a18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a1c:	fa1f f887 	uxth.w	r8, r7
 8000a20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f108 	mul.w	r1, r6, r8
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a32:	d909      	bls.n	8000a48 <__udivmoddi4+0x19c>
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a3a:	f080 808d 	bcs.w	8000b58 <__udivmoddi4+0x2ac>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 808a 	bls.w	8000b58 <__udivmoddi4+0x2ac>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	443b      	add	r3, r7
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b281      	uxth	r1, r0
 8000a4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a58:	fb00 f308 	mul.w	r3, r0, r8
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d907      	bls.n	8000a70 <__udivmoddi4+0x1c4>
 8000a60:	1879      	adds	r1, r7, r1
 8000a62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a66:	d273      	bcs.n	8000b50 <__udivmoddi4+0x2a4>
 8000a68:	428b      	cmp	r3, r1
 8000a6a:	d971      	bls.n	8000b50 <__udivmoddi4+0x2a4>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	4439      	add	r1, r7
 8000a70:	1acb      	subs	r3, r1, r3
 8000a72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a76:	e778      	b.n	800096a <__udivmoddi4+0xbe>
 8000a78:	f1c6 0c20 	rsb	ip, r6, #32
 8000a7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a84:	431c      	orrs	r4, r3
 8000a86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a96:	431f      	orrs	r7, r3
 8000a98:	0c3b      	lsrs	r3, r7, #16
 8000a9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9e:	fa1f f884 	uxth.w	r8, r4
 8000aa2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aa6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aaa:	fb09 fa08 	mul.w	sl, r9, r8
 8000aae:	458a      	cmp	sl, r1
 8000ab0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ab4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x220>
 8000aba:	1861      	adds	r1, r4, r1
 8000abc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ac0:	d248      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac2:	458a      	cmp	sl, r1
 8000ac4:	d946      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aca:	4421      	add	r1, r4
 8000acc:	eba1 010a 	sub.w	r1, r1, sl
 8000ad0:	b2bf      	uxth	r7, r7
 8000ad2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ada:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ade:	fb00 f808 	mul.w	r8, r0, r8
 8000ae2:	45b8      	cmp	r8, r7
 8000ae4:	d907      	bls.n	8000af6 <__udivmoddi4+0x24a>
 8000ae6:	19e7      	adds	r7, r4, r7
 8000ae8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aec:	d22e      	bcs.n	8000b4c <__udivmoddi4+0x2a0>
 8000aee:	45b8      	cmp	r8, r7
 8000af0:	d92c      	bls.n	8000b4c <__udivmoddi4+0x2a0>
 8000af2:	3802      	subs	r0, #2
 8000af4:	4427      	add	r7, r4
 8000af6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000afa:	eba7 0708 	sub.w	r7, r7, r8
 8000afe:	fba0 8902 	umull	r8, r9, r0, r2
 8000b02:	454f      	cmp	r7, r9
 8000b04:	46c6      	mov	lr, r8
 8000b06:	4649      	mov	r1, r9
 8000b08:	d31a      	bcc.n	8000b40 <__udivmoddi4+0x294>
 8000b0a:	d017      	beq.n	8000b3c <__udivmoddi4+0x290>
 8000b0c:	b15d      	cbz	r5, 8000b26 <__udivmoddi4+0x27a>
 8000b0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b12:	eb67 0701 	sbc.w	r7, r7, r1
 8000b16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b1a:	40f2      	lsrs	r2, r6
 8000b1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b20:	40f7      	lsrs	r7, r6
 8000b22:	e9c5 2700 	strd	r2, r7, [r5]
 8000b26:	2600      	movs	r6, #0
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	462e      	mov	r6, r5
 8000b30:	4628      	mov	r0, r5
 8000b32:	e70b      	b.n	800094c <__udivmoddi4+0xa0>
 8000b34:	4606      	mov	r6, r0
 8000b36:	e6e9      	b.n	800090c <__udivmoddi4+0x60>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6fd      	b.n	8000938 <__udivmoddi4+0x8c>
 8000b3c:	4543      	cmp	r3, r8
 8000b3e:	d2e5      	bcs.n	8000b0c <__udivmoddi4+0x260>
 8000b40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b44:	eb69 0104 	sbc.w	r1, r9, r4
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7df      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	e7d2      	b.n	8000af6 <__udivmoddi4+0x24a>
 8000b50:	4660      	mov	r0, ip
 8000b52:	e78d      	b.n	8000a70 <__udivmoddi4+0x1c4>
 8000b54:	4681      	mov	r9, r0
 8000b56:	e7b9      	b.n	8000acc <__udivmoddi4+0x220>
 8000b58:	4666      	mov	r6, ip
 8000b5a:	e775      	b.n	8000a48 <__udivmoddi4+0x19c>
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	e74a      	b.n	80009f6 <__udivmoddi4+0x14a>
 8000b60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b64:	4439      	add	r1, r7
 8000b66:	e713      	b.n	8000990 <__udivmoddi4+0xe4>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	443c      	add	r4, r7
 8000b6c:	e724      	b.n	80009b8 <__udivmoddi4+0x10c>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_idiv0>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <LCD_Set4>:
static uint8_t DisplayControl = 0x0F;                       //Cursor Settings


//-------Functions Definitions-------//
// 1-)LCD set 4bits function
void LCD_Set4(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	817b      	strh	r3, [r7, #10]
 8000b82:	4613      	mov	r3, r2
 8000b84:	813b      	strh	r3, [r7, #8]
    
    //Set GPIO Ports and Pins data
    PORT_RS_and_E = PORT_RS_E;
 8000b86:	4a24      	ldr	r2, [pc, #144]	; (8000c18 <LCD_Set4+0xa4>)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	6013      	str	r3, [r2, #0]
    PIN_RS = RS;
 8000b8c:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <LCD_Set4+0xa8>)
 8000b8e:	897b      	ldrh	r3, [r7, #10]
 8000b90:	8013      	strh	r3, [r2, #0]
    PIN_E = E;
 8000b92:	4a23      	ldr	r2, [pc, #140]	; (8000c20 <LCD_Set4+0xac>)
 8000b94:	893b      	ldrh	r3, [r7, #8]
 8000b96:	8013      	strh	r3, [r2, #0]
    PORT_MSB = PORT_MSBs4to7;
 8000b98:	4a22      	ldr	r2, [pc, #136]	; (8000c24 <LCD_Set4+0xb0>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
    D4_PIN = D4;
 8000b9e:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <LCD_Set4+0xb4>)
 8000ba0:	8b3b      	ldrh	r3, [r7, #24]
 8000ba2:	8013      	strh	r3, [r2, #0]
    D5_PIN = D5;
 8000ba4:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <LCD_Set4+0xb8>)
 8000ba6:	8bbb      	ldrh	r3, [r7, #28]
 8000ba8:	8013      	strh	r3, [r2, #0]
    D6_PIN = D6;
 8000baa:	4a21      	ldr	r2, [pc, #132]	; (8000c30 <LCD_Set4+0xbc>)
 8000bac:	8c3b      	ldrh	r3, [r7, #32]
 8000bae:	8013      	strh	r3, [r2, #0]
    D7_PIN = D7;
 8000bb0:	4a20      	ldr	r2, [pc, #128]	; (8000c34 <LCD_Set4+0xc0>)
 8000bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bb4:	8013      	strh	r3, [r2, #0]

    //Initialise microsecond timer  
    LCD_TIM_Config();
 8000bb6:	f000 f9c3 	bl	8000f40 <LCD_TIM_Config>
    //Set the mode to 8 bits
    mode_8_4=2;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <LCD_Set4+0xc4>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	701a      	strb	r2, [r3, #0]

    
	//1. Wait at least 15ms 
    HAL_Delay(20);
 8000bc0:	2014      	movs	r0, #20
 8000bc2:	f000 fd01 	bl	80015c8 <HAL_Delay>
    //2. Attentions sequence
    LCD_Command4Send(0x3);
 8000bc6:	2003      	movs	r0, #3
 8000bc8:	f000 f838 	bl	8000c3c <LCD_Command4Send>
    HAL_Delay(5);
 8000bcc:	2005      	movs	r0, #5
 8000bce:	f000 fcfb 	bl	80015c8 <HAL_Delay>
    LCD_Command4Send(0x3);
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f000 f832 	bl	8000c3c <LCD_Command4Send>
    HAL_Delay(1);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f000 fcf5 	bl	80015c8 <HAL_Delay>
    LCD_Command4Send(0x3);
 8000bde:	2003      	movs	r0, #3
 8000be0:	f000 f82c 	bl	8000c3c <LCD_Command4Send>
    HAL_Delay(1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f000 fcef 	bl	80015c8 <HAL_Delay>
    //4 bit mode
    LCD_Command4Send(0x2);
 8000bea:	2002      	movs	r0, #2
 8000bec:	f000 f826 	bl	8000c3c <LCD_Command4Send>
    HAL_Delay(1);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f000 fce9 	bl	80015c8 <HAL_Delay>
    
    //3. Display control (Display ON, Cursor ON, blink cursor)
    LCD_CommandSend(LCD_FUNCTION4BIT);
 8000bf6:	2028      	movs	r0, #40	; 0x28
 8000bf8:	f000 f868 	bl	8000ccc <LCD_CommandSend>
    //4. Clear LCD and return home
    LCD_CommandSend(LCD_BLINKCURSOR);
 8000bfc:	200f      	movs	r0, #15
 8000bfe:	f000 f865 	bl	8000ccc <LCD_CommandSend>
    //4. Function set; Enable 2 lines, Data length to 8 bits
    LCD_CommandSend(LCD_RETURNHOME);
 8000c02:	2002      	movs	r0, #2
 8000c04:	f000 f862 	bl	8000ccc <LCD_CommandSend>
    HAL_Delay(2);
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f000 fcdd 	bl	80015c8 <HAL_Delay>
    

}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000090 	.word	0x20000090
 8000c1c:	20000094 	.word	0x20000094
 8000c20:	20000096 	.word	0x20000096
 8000c24:	200000a4 	.word	0x200000a4
 8000c28:	200000a8 	.word	0x200000a8
 8000c2c:	200000aa 	.word	0x200000aa
 8000c30:	200000ac 	.word	0x200000ac
 8000c34:	200000ae 	.word	0x200000ae
 8000c38:	20000000 	.word	0x20000000

08000c3c <LCD_Command4Send>:
    HAL_Delay(2);
    

}
// 3-)Write 4 bits command, *FOR 4 BITS MODE ONLY*
 void LCD_Command4Send(uint8_t nibble){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]

    uint8_t LSB_nibble = nibble&0xf;
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	73fb      	strb	r3, [r7, #15]
    //Set RS to 0
    LCD_RS_State(false);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f932 	bl	8000eb8 <LCD_RS_State>
    //LSB data
    HAL_GPIO_WritePin(PORT_MSB,D4_PIN,(GPIO_PinState)(LSB_nibble&0x1));
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <LCD_Command4Send+0x7c>)
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <LCD_Command4Send+0x80>)
 8000c5a:	8819      	ldrh	r1, [r3, #0]
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	461a      	mov	r2, r3
 8000c66:	f000 ff55 	bl	8001b14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB,D5_PIN,(GPIO_PinState)(LSB_nibble&0x2));
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <LCD_Command4Send+0x7c>)
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <LCD_Command4Send+0x84>)
 8000c70:	8819      	ldrh	r1, [r3, #0]
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f000 ff4a 	bl	8001b14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB,D6_PIN,(GPIO_PinState)(LSB_nibble&0x4));
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <LCD_Command4Send+0x7c>)
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <LCD_Command4Send+0x88>)
 8000c86:	8819      	ldrh	r1, [r3, #0]
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	461a      	mov	r2, r3
 8000c92:	f000 ff3f 	bl	8001b14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB,D7_PIN,(GPIO_PinState)(LSB_nibble&0x8));
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <LCD_Command4Send+0x7c>)
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <LCD_Command4Send+0x8c>)
 8000c9c:	8819      	ldrh	r1, [r3, #0]
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	f003 0308 	and.w	r3, r3, #8
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	f000 ff34 	bl	8001b14 <HAL_GPIO_WritePin>
    //Write the Enable pulse
    LCD_E_State();
 8000cac:	f000 f926 	bl	8000efc <LCD_E_State>

}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200000a4 	.word	0x200000a4
 8000cbc:	200000a8 	.word	0x200000a8
 8000cc0:	200000aa 	.word	0x200000aa
 8000cc4:	200000ac 	.word	0x200000ac
 8000cc8:	200000ae 	.word	0x200000ae

08000ccc <LCD_CommandSend>:
// 4-)Write command
 void LCD_CommandSend(uint8_t command){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
    //Set RS to 0
    LCD_RS_State(false);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f000 f8ee 	bl	8000eb8 <LCD_RS_State>
    //Call low level write parallel function
    LCD_write(command);
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f804 	bl	8000cec <LCD_write>

}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <LCD_write>:
// 5-)Write Parallel interface
 void LCD_write(uint8_t byte){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]

    uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 030f 	and.w	r3, r3, #15
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	73bb      	strb	r3, [r7, #14]

    if(mode_8_4 == 1)//8bits mode
 8000d04:	4b61      	ldr	r3, [pc, #388]	; (8000e8c <LCD_write+0x1a0>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d15a      	bne.n	8000dc2 <LCD_write+0xd6>
    {
        //write data to output pins
		//LSB data
        HAL_GPIO_WritePin(PORT_LSB,D0_PIN,(GPIO_PinState)(LSB_nibble&0x1));
 8000d0c:	4b60      	ldr	r3, [pc, #384]	; (8000e90 <LCD_write+0x1a4>)
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	4b60      	ldr	r3, [pc, #384]	; (8000e94 <LCD_write+0x1a8>)
 8000d12:	8819      	ldrh	r1, [r3, #0]
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	f000 fef9 	bl	8001b14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_LSB,D1_PIN,(GPIO_PinState)(LSB_nibble&0x2));
 8000d22:	4b5b      	ldr	r3, [pc, #364]	; (8000e90 <LCD_write+0x1a4>)
 8000d24:	6818      	ldr	r0, [r3, #0]
 8000d26:	4b5c      	ldr	r3, [pc, #368]	; (8000e98 <LCD_write+0x1ac>)
 8000d28:	8819      	ldrh	r1, [r3, #0]
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	461a      	mov	r2, r3
 8000d34:	f000 feee 	bl	8001b14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_LSB,D2_PIN,(GPIO_PinState)(LSB_nibble&0x4));
 8000d38:	4b55      	ldr	r3, [pc, #340]	; (8000e90 <LCD_write+0x1a4>)
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	4b57      	ldr	r3, [pc, #348]	; (8000e9c <LCD_write+0x1b0>)
 8000d3e:	8819      	ldrh	r1, [r3, #0]
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	f000 fee3 	bl	8001b14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_LSB,D3_PIN,(GPIO_PinState)(LSB_nibble&0x8));
 8000d4e:	4b50      	ldr	r3, [pc, #320]	; (8000e90 <LCD_write+0x1a4>)
 8000d50:	6818      	ldr	r0, [r3, #0]
 8000d52:	4b53      	ldr	r3, [pc, #332]	; (8000ea0 <LCD_write+0x1b4>)
 8000d54:	8819      	ldrh	r1, [r3, #0]
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	461a      	mov	r2, r3
 8000d60:	f000 fed8 	bl	8001b14 <HAL_GPIO_WritePin>

        //MSB data
        HAL_GPIO_WritePin(PORT_MSB,D4_PIN,(GPIO_PinState)(MSB_nibble&0x1));
 8000d64:	4b4f      	ldr	r3, [pc, #316]	; (8000ea4 <LCD_write+0x1b8>)
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	4b4f      	ldr	r3, [pc, #316]	; (8000ea8 <LCD_write+0x1bc>)
 8000d6a:	8819      	ldrh	r1, [r3, #0]
 8000d6c:	7bbb      	ldrb	r3, [r7, #14]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	461a      	mov	r2, r3
 8000d76:	f000 fecd 	bl	8001b14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB,D5_PIN,(GPIO_PinState)(MSB_nibble&0x2));
 8000d7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ea4 <LCD_write+0x1b8>)
 8000d7c:	6818      	ldr	r0, [r3, #0]
 8000d7e:	4b4b      	ldr	r3, [pc, #300]	; (8000eac <LCD_write+0x1c0>)
 8000d80:	8819      	ldrh	r1, [r3, #0]
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f000 fec2 	bl	8001b14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB,D6_PIN,(GPIO_PinState)(MSB_nibble&0x4));
 8000d90:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <LCD_write+0x1b8>)
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <LCD_write+0x1c4>)
 8000d96:	8819      	ldrh	r1, [r3, #0]
 8000d98:	7bbb      	ldrb	r3, [r7, #14]
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	461a      	mov	r2, r3
 8000da2:	f000 feb7 	bl	8001b14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB,D7_PIN,(GPIO_PinState)(MSB_nibble&0x8));
 8000da6:	4b3f      	ldr	r3, [pc, #252]	; (8000ea4 <LCD_write+0x1b8>)
 8000da8:	6818      	ldr	r0, [r3, #0]
 8000daa:	4b42      	ldr	r3, [pc, #264]	; (8000eb4 <LCD_write+0x1c8>)
 8000dac:	8819      	ldrh	r1, [r3, #0]
 8000dae:	7bbb      	ldrb	r3, [r7, #14]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	f000 feac 	bl	8001b14 <HAL_GPIO_WritePin>
        //Write the Enable pulse
        LCD_E_State();
 8000dbc:	f000 f89e 	bl	8000efc <LCD_E_State>
        HAL_GPIO_WritePin(PORT_MSB,D7_PIN,(GPIO_PinState)(LSB_nibble&0x8));
        //Write the Enable pulse
        LCD_E_State();
    }

}
 8000dc0:	e05f      	b.n	8000e82 <LCD_write+0x196>
    else if(mode_8_4 == 2)//4 bits mode
 8000dc2:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <LCD_write+0x1a0>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d15b      	bne.n	8000e82 <LCD_write+0x196>
        HAL_GPIO_WritePin(PORT_MSB,D4_PIN,(GPIO_PinState)(MSB_nibble&0x1));
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <LCD_write+0x1b8>)
 8000dcc:	6818      	ldr	r0, [r3, #0]
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <LCD_write+0x1bc>)
 8000dd0:	8819      	ldrh	r1, [r3, #0]
 8000dd2:	7bbb      	ldrb	r3, [r7, #14]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	461a      	mov	r2, r3
 8000ddc:	f000 fe9a 	bl	8001b14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB,D5_PIN,(GPIO_PinState)(MSB_nibble&0x2));
 8000de0:	4b30      	ldr	r3, [pc, #192]	; (8000ea4 <LCD_write+0x1b8>)
 8000de2:	6818      	ldr	r0, [r3, #0]
 8000de4:	4b31      	ldr	r3, [pc, #196]	; (8000eac <LCD_write+0x1c0>)
 8000de6:	8819      	ldrh	r1, [r3, #0]
 8000de8:	7bbb      	ldrb	r3, [r7, #14]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	461a      	mov	r2, r3
 8000df2:	f000 fe8f 	bl	8001b14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB,D6_PIN,(GPIO_PinState)(MSB_nibble&0x4));
 8000df6:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <LCD_write+0x1b8>)
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <LCD_write+0x1c4>)
 8000dfc:	8819      	ldrh	r1, [r3, #0]
 8000dfe:	7bbb      	ldrb	r3, [r7, #14]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	461a      	mov	r2, r3
 8000e08:	f000 fe84 	bl	8001b14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB,D7_PIN,(GPIO_PinState)(MSB_nibble&0x8));
 8000e0c:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <LCD_write+0x1b8>)
 8000e0e:	6818      	ldr	r0, [r3, #0]
 8000e10:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <LCD_write+0x1c8>)
 8000e12:	8819      	ldrh	r1, [r3, #0]
 8000e14:	7bbb      	ldrb	r3, [r7, #14]
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	f000 fe79 	bl	8001b14 <HAL_GPIO_WritePin>
        LCD_E_State();
 8000e22:	f000 f86b 	bl	8000efc <LCD_E_State>
        HAL_GPIO_WritePin(PORT_MSB,D4_PIN,(GPIO_PinState)(LSB_nibble&0x1));
 8000e26:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <LCD_write+0x1b8>)
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <LCD_write+0x1bc>)
 8000e2c:	8819      	ldrh	r1, [r3, #0]
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	461a      	mov	r2, r3
 8000e38:	f000 fe6c 	bl	8001b14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB,D5_PIN,(GPIO_PinState)(LSB_nibble&0x2));
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <LCD_write+0x1b8>)
 8000e3e:	6818      	ldr	r0, [r3, #0]
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <LCD_write+0x1c0>)
 8000e42:	8819      	ldrh	r1, [r3, #0]
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	f000 fe61 	bl	8001b14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB,D6_PIN,(GPIO_PinState)(LSB_nibble&0x4));
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <LCD_write+0x1b8>)
 8000e54:	6818      	ldr	r0, [r3, #0]
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <LCD_write+0x1c4>)
 8000e58:	8819      	ldrh	r1, [r3, #0]
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	461a      	mov	r2, r3
 8000e64:	f000 fe56 	bl	8001b14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB,D7_PIN,(GPIO_PinState)(LSB_nibble&0x8));
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <LCD_write+0x1b8>)
 8000e6a:	6818      	ldr	r0, [r3, #0]
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <LCD_write+0x1c8>)
 8000e6e:	8819      	ldrh	r1, [r3, #0]
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	f000 fe4b 	bl	8001b14 <HAL_GPIO_WritePin>
        LCD_E_State();
 8000e7e:	f000 f83d 	bl	8000efc <LCD_E_State>
}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000098 	.word	0x20000098
 8000e94:	2000009c 	.word	0x2000009c
 8000e98:	2000009e 	.word	0x2000009e
 8000e9c:	200000a0 	.word	0x200000a0
 8000ea0:	200000a2 	.word	0x200000a2
 8000ea4:	200000a4 	.word	0x200000a4
 8000ea8:	200000a8 	.word	0x200000a8
 8000eac:	200000aa 	.word	0x200000aa
 8000eb0:	200000ac 	.word	0x200000ac
 8000eb4:	200000ae 	.word	0x200000ae

08000eb8 <LCD_RS_State>:
// 6-)RS control
void LCD_RS_State(bool state){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]

    if(state) HAL_GPIO_WritePin(PORT_RS_and_E,PIN_RS,GPIO_PIN_SET);
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d008      	beq.n	8000eda <LCD_RS_State+0x22>
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <LCD_RS_State+0x3c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <LCD_RS_State+0x40>)
 8000ece:	8811      	ldrh	r1, [r2, #0]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fe1e 	bl	8001b14 <HAL_GPIO_WritePin>
    else HAL_GPIO_WritePin(PORT_RS_and_E,PIN_RS,GPIO_PIN_RESET);

}
 8000ed8:	e007      	b.n	8000eea <LCD_RS_State+0x32>
    else HAL_GPIO_WritePin(PORT_RS_and_E,PIN_RS,GPIO_PIN_RESET);
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <LCD_RS_State+0x3c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <LCD_RS_State+0x40>)
 8000ee0:	8811      	ldrh	r1, [r2, #0]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fe15 	bl	8001b14 <HAL_GPIO_WritePin>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000090 	.word	0x20000090
 8000ef8:	20000094 	.word	0x20000094

08000efc <LCD_E_State>:
// 7-)Enable EN pulse
void LCD_E_State(void){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(PORT_RS_and_E,PIN_E,GPIO_PIN_SET);
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <LCD_E_State+0x38>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <LCD_E_State+0x3c>)
 8000f06:	8811      	ldrh	r1, [r2, #0]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fe02 	bl	8001b14 <HAL_GPIO_WritePin>
    LCD_TIM_MicroSecDelay(writeTimeConstant);
 8000f10:	230a      	movs	r3, #10
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f874 	bl	8001000 <LCD_TIM_MicroSecDelay>
    HAL_GPIO_WritePin(PORT_RS_and_E,PIN_E,GPIO_PIN_RESET);
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <LCD_E_State+0x38>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <LCD_E_State+0x3c>)
 8000f1e:	8811      	ldrh	r1, [r2, #0]
 8000f20:	2200      	movs	r2, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fdf6 	bl	8001b14 <HAL_GPIO_WritePin>
    LCD_TIM_MicroSecDelay(60);
 8000f28:	203c      	movs	r0, #60	; 0x3c
 8000f2a:	f000 f869 	bl	8001000 <LCD_TIM_MicroSecDelay>
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000090 	.word	0x20000090
 8000f38:	20000096 	.word	0x20000096
 8000f3c:	00000000 	.word	0x00000000

08000f40 <LCD_TIM_Config>:
// 8-)Microsecond delay functions
void LCD_TIM_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 8000f46:	1d3a      	adds	r2, r7, #4
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 fa5a 	bl	8002408 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d103      	bne.n	8000f62 <LCD_TIM_Config+0x22>
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 8000f5a:	f001 fa41 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8000f5e:	61f8      	str	r0, [r7, #28]
 8000f60:	e004      	b.n	8000f6c <LCD_TIM_Config+0x2c>
	}
	else
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 8000f62:	f001 fa3d 	bl	80023e0 <HAL_RCC_GetPCLK1Freq>
 8000f66:	4603      	mov	r3, r0
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
	}
	clockSpeed *= 0.000001;
 8000f6c:	69f8      	ldr	r0, [r7, #28]
 8000f6e:	f7ff fbeb 	bl	8000748 <__aeabi_ui2d>
 8000f72:	a321      	add	r3, pc, #132	; (adr r3, 8000ff8 <LCD_TIM_Config+0xb8>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f7ff f97a 	bl	8000270 <__aeabi_dmul>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f7ff fc5a 	bl	800083c <__aeabi_d2uiz>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	61fb      	str	r3, [r7, #28]
	
	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <LCD_TIM_Config+0xb0>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <LCD_TIM_Config+0xb0>)
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	6413      	str	r3, [r2, #64]	; 0x40
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <LCD_TIM_Config+0xb4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <LCD_TIM_Config+0xb4>)
 8000f9e:	f023 0310 	bic.w	r3, r3, #16
 8000fa2:	6013      	str	r3, [r2, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <LCD_TIM_Config+0xb4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <LCD_TIM_Config+0xb4>)
 8000faa:	f023 0301 	bic.w	r3, r3, #1
 8000fae:	6013      	str	r3, [r2, #0]
	//Update request source 
	TIM3->CR1 &= ~(1UL << 2);
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <LCD_TIM_Config+0xb4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <LCD_TIM_Config+0xb4>)
 8000fb6:	f023 0304 	bic.w	r3, r3, #4
 8000fba:	6013      	str	r3, [r2, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);				  
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <LCD_TIM_Config+0xb4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <LCD_TIM_Config+0xb4>)
 8000fc2:	f043 0308 	orr.w	r3, r3, #8
 8000fc6:	6013      	str	r3, [r2, #0]
	//Set the Prescalar
	TIM3->PSC = clockSpeed-1;
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <LCD_TIM_Config+0xb4>)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	6293      	str	r3, [r2, #40]	; 0x28
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <LCD_TIM_Config+0xb4>)
 8000fd2:	2209      	movs	r2, #9
 8000fd4:	62da      	str	r2, [r3, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <LCD_TIM_Config+0xb4>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <LCD_TIM_Config+0xb4>)
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <LCD_TIM_Config+0xb4>)
 8000fe2:	f023 0301 	bic.w	r3, r3, #1
 8000fe6:	6113      	str	r3, [r2, #16]
}
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40000400 	.word	0x40000400
 8000ff8:	a0b5ed8d 	.word	0xa0b5ed8d
 8000ffc:	3eb0c6f7 	.word	0x3eb0c6f7

08001000 <LCD_TIM_MicroSecDelay>:

void LCD_TIM_MicroSecDelay(uint32_t uSecDelay)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	TIM3->ARR = uSecDelay-1;
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <LCD_TIM_MicroSecDelay+0x44>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3b01      	subs	r3, #1
 800100e:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <LCD_TIM_MicroSecDelay+0x44>)
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LCD_TIM_MicroSecDelay+0x44>)
 8001016:	f023 0301 	bic.w	r3, r3, #1
 800101a:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= 1UL;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <LCD_TIM_MicroSecDelay+0x44>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a08      	ldr	r2, [pc, #32]	; (8001044 <LCD_TIM_MicroSecDelay+0x44>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6013      	str	r3, [r2, #0]
	while((TIM3->SR&0x0001) != 1);
 8001028:	bf00      	nop
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <LCD_TIM_MicroSecDelay+0x44>)
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b01      	cmp	r3, #1
 8001034:	d1f9      	bne.n	800102a <LCD_TIM_MicroSecDelay+0x2a>
}
 8001036:	bf00      	nop
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	40000400 	.word	0x40000400

08001048 <LCD_setCursor>:
// 9-)Set cursor position
void LCD_setCursor(uint8_t row,uint8_t col){
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]

    uint8_t maskData;
    maskData=(col-1)&0x0F;
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	3b01      	subs	r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	73fb      	strb	r3, [r7, #15]
    if(row==1){
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d108      	bne.n	800107c <LCD_setCursor+0x34>
        maskData |= (0x80);
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001070:	73fb      	strb	r3, [r7, #15]
        LCD_CommandSend(maskData);
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fe29 	bl	8000ccc <LCD_CommandSend>
    }
    else{
        maskData |= (0xc0);
        LCD_CommandSend(maskData);
    }
}
 800107a:	e007      	b.n	800108c <LCD_setCursor+0x44>
        maskData |= (0xc0);
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001082:	73fb      	strb	r3, [r7, #15]
        LCD_CommandSend(maskData);
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fe20 	bl	8000ccc <LCD_CommandSend>
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <LCD_1stLine>:

void LCD_1stLine(void){
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    LCD_setCursor(1,1);
 8001098:	2101      	movs	r1, #1
 800109a:	2001      	movs	r0, #1
 800109c:	f7ff ffd4 	bl	8001048 <LCD_setCursor>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <LCD_2ndLine>:

void LCD_2ndLine(void){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
    LCD_setCursor(2,1);
 80010a8:	2101      	movs	r1, #1
 80010aa:	2002      	movs	r0, #2
 80010ac:	f7ff ffcc 	bl	8001048 <LCD_setCursor>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <LCD_print>:
// 10-)LCD print string
void LCD_print(char string[]){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

    for(uint8_t i=0; i<16 && string[i]!=NULL; i++){
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	e009      	b.n	80010d6 <LCD_print+0x22>
        LCD_writeData((uint8_t)string[i]);
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f810 	bl	80010f0 <LCD_writeData>
    for(uint8_t i=0; i<16 && string[i]!=NULL; i++){
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	3301      	adds	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d805      	bhi.n	80010e8 <LCD_print+0x34>
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1ec      	bne.n	80010c2 <LCD_print+0xe>
    }
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <LCD_writeData>:
// 11-)Write 8 bits data
void LCD_writeData(uint8_t data){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]

    LCD_RS_State(true);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f7ff fedc 	bl	8000eb8 <LCD_RS_State>

    LCD_write(data);
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fdf2 	bl	8000cec <LCD_write>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <LCD_Clear>:
// 12-) Clear display
void LCD_Clear(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

    LCD_CommandSend(LCD_CLEARSCREEN);
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff fdd9 	bl	8000ccc <LCD_CommandSend>
    HAL_Delay(3);
 800111a:	2003      	movs	r0, #3
 800111c:	f000 fa54 	bl	80015c8 <HAL_Delay>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112a:	f000 f9db 	bl	80014e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112e:	f000 f83f 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001132:	f000 f8a7 	bl	8001284 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
 LCD_Set4(GPIOA, GPIO_PIN_0,GPIO_PIN_1, GPIOB, GPIO_PIN_4,GPIO_PIN_5, GPIO_PIN_6,GPIO_PIN_7);
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	9303      	str	r3, [sp, #12]
 800113a:	2340      	movs	r3, #64	; 0x40
 800113c:	9302      	str	r3, [sp, #8]
 800113e:	2320      	movs	r3, #32
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	2310      	movs	r3, #16
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <main+0x78>)
 8001148:	2202      	movs	r2, #2
 800114a:	2101      	movs	r1, #1
 800114c:	4814      	ldr	r0, [pc, #80]	; (80011a0 <main+0x7c>)
 800114e:	f7ff fd11 	bl	8000b74 <LCD_Set4>
 LCD_Clear();
 8001152:	f7ff ffdd 	bl	8001110 <LCD_Clear>
 LCD_1stLine();
 8001156:	f7ff ff9d 	bl	8001094 <LCD_1stLine>
 LCD_print("TIGER OZAN");
 800115a:	4812      	ldr	r0, [pc, #72]	; (80011a4 <main+0x80>)
 800115c:	f7ff ffaa 	bl	80010b4 <LCD_print>
 LCD_2ndLine();
 8001160:	f7ff ffa0 	bl	80010a4 <LCD_2ndLine>
 LCD_print("XXXXXXXX ");
 8001164:	4810      	ldr	r0, [pc, #64]	; (80011a8 <main+0x84>)
 8001166:	f7ff ffa5 	bl	80010b4 <LCD_print>

 char line1[16];
   int counter=0;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LCD_Clear();
 800116e:	f7ff ffcf 	bl	8001110 <LCD_Clear>
	  	  counter++;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
	  	  	sprintf(line1,"Counter = %d ",counter);
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	490b      	ldr	r1, [pc, #44]	; (80011ac <main+0x88>)
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f9a6 	bl	80024d0 <siprintf>
	  	  LCD_1stLine();
 8001184:	f7ff ff86 	bl	8001094 <LCD_1stLine>
	  	LCD_print(line1);
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff92 	bl	80010b4 <LCD_print>

	  	  	  //HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
	  	  HAL_Delay(1000);
 8001190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001194:	f000 fa18 	bl	80015c8 <HAL_Delay>
	  LCD_Clear();
 8001198:	e7e9      	b.n	800116e <main+0x4a>
 800119a:	bf00      	nop
 800119c:	40020400 	.word	0x40020400
 80011a0:	40020000 	.word	0x40020000
 80011a4:	08002d44 	.word	0x08002d44
 80011a8:	08002d50 	.word	0x08002d50
 80011ac:	08002d5c 	.word	0x08002d5c

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b094      	sub	sp, #80	; 0x50
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	2230      	movs	r2, #48	; 0x30
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 f97e 	bl	80024c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <SystemClock_Config+0xcc>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	4a27      	ldr	r2, [pc, #156]	; (800127c <SystemClock_Config+0xcc>)
 80011de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e2:	6413      	str	r3, [r2, #64]	; 0x40
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <SystemClock_Config+0xcc>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <SystemClock_Config+0xd0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a21      	ldr	r2, [pc, #132]	; (8001280 <SystemClock_Config+0xd0>)
 80011fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <SystemClock_Config+0xd0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120c:	2302      	movs	r3, #2
 800120e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001210:	2301      	movs	r3, #1
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001214:	2310      	movs	r3, #16
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001218:	2302      	movs	r3, #2
 800121a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800121c:	2300      	movs	r3, #0
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001220:	2308      	movs	r3, #8
 8001222:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001224:	23a8      	movs	r3, #168	; 0xa8
 8001226:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001228:	2302      	movs	r3, #2
 800122a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800122c:	2304      	movs	r3, #4
 800122e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fc87 	bl	8001b48 <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001240:	f000 f886 	bl	8001350 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001244:	230f      	movs	r3, #15
 8001246:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001248:	2302      	movs	r3, #2
 800124a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001250:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001254:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	2105      	movs	r1, #5
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fee8 	bl	8002038 <HAL_RCC_ClockConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800126e:	f000 f86f 	bl	8001350 <Error_Handler>
  }
}
 8001272:	bf00      	nop
 8001274:	3750      	adds	r7, #80	; 0x50
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40007000 	.word	0x40007000

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a28      	ldr	r2, [pc, #160]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b22      	ldr	r3, [pc, #136]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a21      	ldr	r2, [pc, #132]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a1a      	ldr	r2, [pc, #104]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2103      	movs	r1, #3
 80012f2:	4815      	ldr	r0, [pc, #84]	; (8001348 <MX_GPIO_Init+0xc4>)
 80012f4:	f000 fc0e 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	21f0      	movs	r1, #240	; 0xf0
 80012fc:	4813      	ldr	r0, [pc, #76]	; (800134c <MX_GPIO_Init+0xc8>)
 80012fe:	f000 fc09 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001302:	2303      	movs	r3, #3
 8001304:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001306:	2301      	movs	r3, #1
 8001308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4619      	mov	r1, r3
 8001318:	480b      	ldr	r0, [pc, #44]	; (8001348 <MX_GPIO_Init+0xc4>)
 800131a:	f000 fa5f 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800131e:	23f0      	movs	r3, #240	; 0xf0
 8001320:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_GPIO_Init+0xc8>)
 8001336:	f000 fa51 	bl	80017dc <HAL_GPIO_Init>

}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40020000 	.word	0x40020000
 800134c:	40020400 	.word	0x40020400

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>
	...

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_MspInit+0x4c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <HAL_MspInit+0x4c>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <HAL_MspInit+0x4c>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_MspInit+0x4c>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <HAL_MspInit+0x4c>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_MspInit+0x4c>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800

080013ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <NMI_Handler+0x4>

080013b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <HardFault_Handler+0x4>

080013b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <MemManage_Handler+0x4>

080013be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <BusFault_Handler+0x4>

080013c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <UsageFault_Handler+0x4>

080013ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f8:	f000 f8c6 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <_sbrk+0x5c>)
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <_sbrk+0x60>)
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001430:	f001 f81c 	bl	800246c <__errno>
 8001434:	4603      	mov	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <_sbrk+0x64>)
 8001450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20020000 	.word	0x20020000
 8001460:	00000400 	.word	0x00000400
 8001464:	200000b0 	.word	0x200000b0
 8001468:	200000d0 	.word	0x200000d0

0800146c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001496:	490e      	ldr	r1, [pc, #56]	; (80014d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800149c:	e002      	b.n	80014a4 <LoopCopyDataInit>

0800149e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a2:	3304      	adds	r3, #4

080014a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a8:	d3f9      	bcc.n	800149e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014aa:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014ac:	4c0b      	ldr	r4, [pc, #44]	; (80014dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b0:	e001      	b.n	80014b6 <LoopFillZerobss>

080014b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b4:	3204      	adds	r2, #4

080014b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b8:	d3fb      	bcc.n	80014b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014ba:	f7ff ffd7 	bl	800146c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014be:	f000 ffdb 	bl	8002478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c2:	f7ff fe2f 	bl	8001124 <main>
  bx  lr    
 80014c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014d4:	08002dc8 	.word	0x08002dc8
  ldr r2, =_sbss
 80014d8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80014dc:	200000d0 	.word	0x200000d0

080014e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC_IRQHandler>
	...

080014e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <HAL_Init+0x40>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <HAL_Init+0x40>)
 80014ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_Init+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <HAL_Init+0x40>)
 80014fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_Init+0x40>)
 8001506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150c:	2003      	movs	r0, #3
 800150e:	f000 f931 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001512:	200f      	movs	r0, #15
 8001514:	f000 f808 	bl	8001528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001518:	f7ff ff20 	bl	800135c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023c00 	.word	0x40023c00

08001528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x54>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_InitTick+0x58>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001542:	fbb2 f3f3 	udiv	r3, r2, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f93b 	bl	80017c2 <HAL_SYSTICK_Config>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e00e      	b.n	8001574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b0f      	cmp	r3, #15
 800155a:	d80a      	bhi.n	8001572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155c:	2200      	movs	r2, #0
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f000 f911 	bl	800178a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <HAL_InitTick+0x5c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e000      	b.n	8001574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000004 	.word	0x20000004
 8001580:	2000000c 	.word	0x2000000c
 8001584:	20000008 	.word	0x20000008

08001588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x20>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_IncTick+0x24>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <HAL_IncTick+0x24>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	2000000c 	.word	0x2000000c
 80015ac:	200000bc 	.word	0x200000bc

080015b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_GetTick+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200000bc 	.word	0x200000bc

080015c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff ffee 	bl	80015b0 <HAL_GetTick>
 80015d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d005      	beq.n	80015ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_Delay+0x44>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ee:	bf00      	nop
 80015f0:	f7ff ffde 	bl	80015b0 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d8f7      	bhi.n	80015f0 <HAL_Delay+0x28>
  {
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2000000c 	.word	0x2000000c

08001610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800163c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	2b00      	cmp	r3, #0
 8001686:	db0a      	blt.n	800169e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	490c      	ldr	r1, [pc, #48]	; (80016c0 <__NVIC_SetPriority+0x4c>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	0112      	lsls	r2, r2, #4
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	440b      	add	r3, r1
 8001698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800169c:	e00a      	b.n	80016b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4908      	ldr	r1, [pc, #32]	; (80016c4 <__NVIC_SetPriority+0x50>)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	3b04      	subs	r3, #4
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	440b      	add	r3, r1
 80016b2:	761a      	strb	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f1c3 0307 	rsb	r3, r3, #7
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	bf28      	it	cs
 80016e6:	2304      	movcs	r3, #4
 80016e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3304      	adds	r3, #4
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d902      	bls.n	80016f8 <NVIC_EncodePriority+0x30>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b03      	subs	r3, #3
 80016f6:	e000      	b.n	80016fa <NVIC_EncodePriority+0x32>
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001710:	f04f 31ff 	mov.w	r1, #4294967295
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43d9      	mvns	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	4313      	orrs	r3, r2
         );
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f7ff ff8e 	bl	8001674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff47 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff5c 	bl	8001658 <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff8e 	bl	80016c8 <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5d 	bl	8001674 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffb0 	bl	8001730 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
 80017f6:	e16b      	b.n	8001ad0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f8:	2201      	movs	r2, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	429a      	cmp	r2, r3
 8001812:	f040 815a 	bne.w	8001aca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b01      	cmp	r3, #1
 8001820:	d005      	beq.n	800182e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182a:	2b02      	cmp	r3, #2
 800182c:	d130      	bne.n	8001890 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001864:	2201      	movs	r2, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 0201 	and.w	r2, r3, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b03      	cmp	r3, #3
 800189a:	d017      	beq.n	80018cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d123      	bne.n	8001920 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	08da      	lsrs	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3208      	adds	r2, #8
 80018e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	08da      	lsrs	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3208      	adds	r2, #8
 800191a:	69b9      	ldr	r1, [r7, #24]
 800191c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0203 	and.w	r2, r3, #3
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80b4 	beq.w	8001aca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b60      	ldr	r3, [pc, #384]	; (8001ae8 <HAL_GPIO_Init+0x30c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	4a5f      	ldr	r2, [pc, #380]	; (8001ae8 <HAL_GPIO_Init+0x30c>)
 800196c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001970:	6453      	str	r3, [r2, #68]	; 0x44
 8001972:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <HAL_GPIO_Init+0x30c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197e:	4a5b      	ldr	r2, [pc, #364]	; (8001aec <HAL_GPIO_Init+0x310>)
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a52      	ldr	r2, [pc, #328]	; (8001af0 <HAL_GPIO_Init+0x314>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d02b      	beq.n	8001a02 <HAL_GPIO_Init+0x226>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a51      	ldr	r2, [pc, #324]	; (8001af4 <HAL_GPIO_Init+0x318>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d025      	beq.n	80019fe <HAL_GPIO_Init+0x222>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a50      	ldr	r2, [pc, #320]	; (8001af8 <HAL_GPIO_Init+0x31c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01f      	beq.n	80019fa <HAL_GPIO_Init+0x21e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4f      	ldr	r2, [pc, #316]	; (8001afc <HAL_GPIO_Init+0x320>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d019      	beq.n	80019f6 <HAL_GPIO_Init+0x21a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4e      	ldr	r2, [pc, #312]	; (8001b00 <HAL_GPIO_Init+0x324>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_GPIO_Init+0x216>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4d      	ldr	r2, [pc, #308]	; (8001b04 <HAL_GPIO_Init+0x328>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00d      	beq.n	80019ee <HAL_GPIO_Init+0x212>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4c      	ldr	r2, [pc, #304]	; (8001b08 <HAL_GPIO_Init+0x32c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d007      	beq.n	80019ea <HAL_GPIO_Init+0x20e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4b      	ldr	r2, [pc, #300]	; (8001b0c <HAL_GPIO_Init+0x330>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_GPIO_Init+0x20a>
 80019e2:	2307      	movs	r3, #7
 80019e4:	e00e      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019e6:	2308      	movs	r3, #8
 80019e8:	e00c      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019ea:	2306      	movs	r3, #6
 80019ec:	e00a      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019ee:	2305      	movs	r3, #5
 80019f0:	e008      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019f2:	2304      	movs	r3, #4
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019f6:	2303      	movs	r3, #3
 80019f8:	e004      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e002      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 8001a02:	2300      	movs	r3, #0
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	f002 0203 	and.w	r2, r2, #3
 8001a0a:	0092      	lsls	r2, r2, #2
 8001a0c:	4093      	lsls	r3, r2
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a14:	4935      	ldr	r1, [pc, #212]	; (8001aec <HAL_GPIO_Init+0x310>)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a22:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a46:	4a32      	ldr	r2, [pc, #200]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a4c:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a70:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a9a:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac4:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3301      	adds	r3, #1
 8001ace:	61fb      	str	r3, [r7, #28]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	2b0f      	cmp	r3, #15
 8001ad4:	f67f ae90 	bls.w	80017f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40013800 	.word	0x40013800
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40020400 	.word	0x40020400
 8001af8:	40020800 	.word	0x40020800
 8001afc:	40020c00 	.word	0x40020c00
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40021400 	.word	0x40021400
 8001b08:	40021800 	.word	0x40021800
 8001b0c:	40021c00 	.word	0x40021c00
 8001b10:	40013c00 	.word	0x40013c00

08001b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
 8001b20:	4613      	mov	r3, r2
 8001b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b24:	787b      	ldrb	r3, [r7, #1]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b30:	e003      	b.n	8001b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	041a      	lsls	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	619a      	str	r2, [r3, #24]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e264      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d075      	beq.n	8001c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b66:	4ba3      	ldr	r3, [pc, #652]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d00c      	beq.n	8001b8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b72:	4ba0      	ldr	r3, [pc, #640]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d112      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7e:	4b9d      	ldr	r3, [pc, #628]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	4b99      	ldr	r3, [pc, #612]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d05b      	beq.n	8001c50 <HAL_RCC_OscConfig+0x108>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d157      	bne.n	8001c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e23f      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bac:	d106      	bne.n	8001bbc <HAL_RCC_OscConfig+0x74>
 8001bae:	4b91      	ldr	r3, [pc, #580]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a90      	ldr	r2, [pc, #576]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e01d      	b.n	8001bf8 <HAL_RCC_OscConfig+0xb0>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x98>
 8001bc6:	4b8b      	ldr	r3, [pc, #556]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a8a      	ldr	r2, [pc, #552]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b88      	ldr	r3, [pc, #544]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a87      	ldr	r2, [pc, #540]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0xb0>
 8001be0:	4b84      	ldr	r3, [pc, #528]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a83      	ldr	r2, [pc, #524]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b81      	ldr	r3, [pc, #516]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a80      	ldr	r2, [pc, #512]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff fcd6 	bl	80015b0 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff fcd2 	bl	80015b0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	; 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e204      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b76      	ldr	r3, [pc, #472]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0xc0>
 8001c26:	e014      	b.n	8001c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff fcc2 	bl	80015b0 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff fcbe 	bl	80015b0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e1f0      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	4b6c      	ldr	r3, [pc, #432]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0xe8>
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d063      	beq.n	8001d26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c5e:	4b65      	ldr	r3, [pc, #404]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00b      	beq.n	8001c82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6a:	4b62      	ldr	r3, [pc, #392]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d11c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c76:	4b5f      	ldr	r3, [pc, #380]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d116      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c82:	4b5c      	ldr	r3, [pc, #368]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_RCC_OscConfig+0x152>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e1c4      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9a:	4b56      	ldr	r3, [pc, #344]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4952      	ldr	r1, [pc, #328]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cae:	e03a      	b.n	8001d26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d020      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb8:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <HAL_RCC_OscConfig+0x2b0>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbe:	f7ff fc77 	bl	80015b0 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc6:	f7ff fc73 	bl	80015b0 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e1a5      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	4b46      	ldr	r3, [pc, #280]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	4b43      	ldr	r3, [pc, #268]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4940      	ldr	r1, [pc, #256]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfa:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <HAL_RCC_OscConfig+0x2b0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fc56 	bl	80015b0 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d08:	f7ff fc52 	bl	80015b0 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e184      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d030      	beq.n	8001d94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d016      	beq.n	8001d68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3a:	4b30      	ldr	r3, [pc, #192]	; (8001dfc <HAL_RCC_OscConfig+0x2b4>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7ff fc36 	bl	80015b0 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d48:	f7ff fc32 	bl	80015b0 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e164      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x200>
 8001d66:	e015      	b.n	8001d94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d68:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <HAL_RCC_OscConfig+0x2b4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fc1f 	bl	80015b0 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d76:	f7ff fc1b 	bl	80015b0 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e14d      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f0      	bne.n	8001d76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a0 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10f      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_RCC_OscConfig+0x2b8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d121      	bne.n	8001e22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_RCC_OscConfig+0x2b8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <HAL_RCC_OscConfig+0x2b8>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dea:	f7ff fbe1 	bl	80015b0 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	e011      	b.n	8001e16 <HAL_RCC_OscConfig+0x2ce>
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	42470000 	.word	0x42470000
 8001dfc:	42470e80 	.word	0x42470e80
 8001e00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e04:	f7ff fbd4 	bl	80015b0 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e106      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e16:	4b85      	ldr	r3, [pc, #532]	; (800202c <HAL_RCC_OscConfig+0x4e4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d106      	bne.n	8001e38 <HAL_RCC_OscConfig+0x2f0>
 8001e2a:	4b81      	ldr	r3, [pc, #516]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2e:	4a80      	ldr	r2, [pc, #512]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6713      	str	r3, [r2, #112]	; 0x70
 8001e36:	e01c      	b.n	8001e72 <HAL_RCC_OscConfig+0x32a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	d10c      	bne.n	8001e5a <HAL_RCC_OscConfig+0x312>
 8001e40:	4b7b      	ldr	r3, [pc, #492]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	4a7a      	ldr	r2, [pc, #488]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4c:	4b78      	ldr	r3, [pc, #480]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	4a77      	ldr	r2, [pc, #476]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6713      	str	r3, [r2, #112]	; 0x70
 8001e58:	e00b      	b.n	8001e72 <HAL_RCC_OscConfig+0x32a>
 8001e5a:	4b75      	ldr	r3, [pc, #468]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	4a74      	ldr	r2, [pc, #464]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6713      	str	r3, [r2, #112]	; 0x70
 8001e66:	4b72      	ldr	r3, [pc, #456]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	4a71      	ldr	r2, [pc, #452]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d015      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fb99 	bl	80015b0 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7ff fb95 	bl	80015b0 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e0c5      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e98:	4b65      	ldr	r3, [pc, #404]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ee      	beq.n	8001e82 <HAL_RCC_OscConfig+0x33a>
 8001ea4:	e014      	b.n	8001ed0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fb83 	bl	80015b0 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7ff fb7f 	bl	80015b0 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e0af      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec4:	4b5a      	ldr	r3, [pc, #360]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ee      	bne.n	8001eae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed6:	4b56      	ldr	r3, [pc, #344]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a55      	ldr	r2, [pc, #340]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 809b 	beq.w	8002022 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eec:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d05c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d141      	bne.n	8001f84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f00:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <HAL_RCC_OscConfig+0x4ec>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7ff fb53 	bl	80015b0 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7ff fb4f 	bl	80015b0 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e081      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f20:	4b43      	ldr	r3, [pc, #268]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	019b      	lsls	r3, r3, #6
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	3b01      	subs	r3, #1
 8001f46:	041b      	lsls	r3, r3, #16
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	061b      	lsls	r3, r3, #24
 8001f50:	4937      	ldr	r1, [pc, #220]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f56:	4b37      	ldr	r3, [pc, #220]	; (8002034 <HAL_RCC_OscConfig+0x4ec>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fb28 	bl	80015b0 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f64:	f7ff fb24 	bl	80015b0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e056      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f76:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x41c>
 8001f82:	e04e      	b.n	8002022 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f84:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <HAL_RCC_OscConfig+0x4ec>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7ff fb11 	bl	80015b0 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f92:	f7ff fb0d 	bl	80015b0 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e03f      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa4:	4b22      	ldr	r3, [pc, #136]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f0      	bne.n	8001f92 <HAL_RCC_OscConfig+0x44a>
 8001fb0:	e037      	b.n	8002022 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e032      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <HAL_RCC_OscConfig+0x4e8>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d028      	beq.n	800201e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d121      	bne.n	800201e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d11a      	bne.n	800201e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fee:	4013      	ands	r3, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ff4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d111      	bne.n	800201e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	085b      	lsrs	r3, r3, #1
 8002006:	3b01      	subs	r3, #1
 8002008:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d107      	bne.n	800201e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40007000 	.word	0x40007000
 8002030:	40023800 	.word	0x40023800
 8002034:	42470060 	.word	0x42470060

08002038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0cc      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800204c:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d90c      	bls.n	8002074 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0b8      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800208c:	4b59      	ldr	r3, [pc, #356]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4a58      	ldr	r2, [pc, #352]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002096:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a4:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	4a52      	ldr	r2, [pc, #328]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b0:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	494d      	ldr	r1, [pc, #308]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d044      	beq.n	8002158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d119      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e07f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d003      	beq.n	80020f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f6:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d109      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e06f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002106:	4b3b      	ldr	r3, [pc, #236]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e067      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002116:	4b37      	ldr	r3, [pc, #220]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f023 0203 	bic.w	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4934      	ldr	r1, [pc, #208]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	4313      	orrs	r3, r2
 8002126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002128:	f7ff fa42 	bl	80015b0 <HAL_GetTick>
 800212c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	e00a      	b.n	8002146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002130:	f7ff fa3e 	bl	80015b0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e04f      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 020c 	and.w	r2, r3, #12
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	429a      	cmp	r2, r3
 8002156:	d1eb      	bne.n	8002130 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002158:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d20c      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e032      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4916      	ldr	r1, [pc, #88]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	490e      	ldr	r1, [pc, #56]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021be:	f000 f821 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80021c2:	4602      	mov	r2, r0
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	490a      	ldr	r1, [pc, #40]	; (80021f8 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	5ccb      	ldrb	r3, [r1, r3]
 80021d2:	fa22 f303 	lsr.w	r3, r2, r3
 80021d6:	4a09      	ldr	r2, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1c8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f9a2 	bl	8001528 <HAL_InitTick>

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023c00 	.word	0x40023c00
 80021f4:	40023800 	.word	0x40023800
 80021f8:	08002d6c 	.word	0x08002d6c
 80021fc:	20000004 	.word	0x20000004
 8002200:	20000008 	.word	0x20000008

08002204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002204:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	2300      	movs	r3, #0
 8002216:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800221c:	4b67      	ldr	r3, [pc, #412]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d00d      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x40>
 8002228:	2b08      	cmp	r3, #8
 800222a:	f200 80bd 	bhi.w	80023a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0x34>
 8002232:	2b04      	cmp	r3, #4
 8002234:	d003      	beq.n	800223e <HAL_RCC_GetSysClockFreq+0x3a>
 8002236:	e0b7      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002238:	4b61      	ldr	r3, [pc, #388]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800223a:	60bb      	str	r3, [r7, #8]
       break;
 800223c:	e0b7      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800223e:	4b61      	ldr	r3, [pc, #388]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002240:	60bb      	str	r3, [r7, #8]
      break;
 8002242:	e0b4      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002244:	4b5d      	ldr	r3, [pc, #372]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800224c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800224e:	4b5b      	ldr	r3, [pc, #364]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d04d      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225a:	4b58      	ldr	r3, [pc, #352]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	099b      	lsrs	r3, r3, #6
 8002260:	461a      	mov	r2, r3
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	f240 10ff 	movw	r0, #511	; 0x1ff
 800226a:	f04f 0100 	mov.w	r1, #0
 800226e:	ea02 0800 	and.w	r8, r2, r0
 8002272:	ea03 0901 	and.w	r9, r3, r1
 8002276:	4640      	mov	r0, r8
 8002278:	4649      	mov	r1, r9
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	014b      	lsls	r3, r1, #5
 8002284:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002288:	0142      	lsls	r2, r0, #5
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	ebb0 0008 	subs.w	r0, r0, r8
 8002292:	eb61 0109 	sbc.w	r1, r1, r9
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	018b      	lsls	r3, r1, #6
 80022a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022a4:	0182      	lsls	r2, r0, #6
 80022a6:	1a12      	subs	r2, r2, r0
 80022a8:	eb63 0301 	sbc.w	r3, r3, r1
 80022ac:	f04f 0000 	mov.w	r0, #0
 80022b0:	f04f 0100 	mov.w	r1, #0
 80022b4:	00d9      	lsls	r1, r3, #3
 80022b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022ba:	00d0      	lsls	r0, r2, #3
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	eb12 0208 	adds.w	r2, r2, r8
 80022c4:	eb43 0309 	adc.w	r3, r3, r9
 80022c8:	f04f 0000 	mov.w	r0, #0
 80022cc:	f04f 0100 	mov.w	r1, #0
 80022d0:	0259      	lsls	r1, r3, #9
 80022d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80022d6:	0250      	lsls	r0, r2, #9
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	461a      	mov	r2, r3
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	f7fe fac8 	bl	800087c <__aeabi_uldivmod>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4613      	mov	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e04a      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f6:	4b31      	ldr	r3, [pc, #196]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	099b      	lsrs	r3, r3, #6
 80022fc:	461a      	mov	r2, r3
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002306:	f04f 0100 	mov.w	r1, #0
 800230a:	ea02 0400 	and.w	r4, r2, r0
 800230e:	ea03 0501 	and.w	r5, r3, r1
 8002312:	4620      	mov	r0, r4
 8002314:	4629      	mov	r1, r5
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	014b      	lsls	r3, r1, #5
 8002320:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002324:	0142      	lsls	r2, r0, #5
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	1b00      	subs	r0, r0, r4
 800232c:	eb61 0105 	sbc.w	r1, r1, r5
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	018b      	lsls	r3, r1, #6
 800233a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800233e:	0182      	lsls	r2, r0, #6
 8002340:	1a12      	subs	r2, r2, r0
 8002342:	eb63 0301 	sbc.w	r3, r3, r1
 8002346:	f04f 0000 	mov.w	r0, #0
 800234a:	f04f 0100 	mov.w	r1, #0
 800234e:	00d9      	lsls	r1, r3, #3
 8002350:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002354:	00d0      	lsls	r0, r2, #3
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	1912      	adds	r2, r2, r4
 800235c:	eb45 0303 	adc.w	r3, r5, r3
 8002360:	f04f 0000 	mov.w	r0, #0
 8002364:	f04f 0100 	mov.w	r1, #0
 8002368:	0299      	lsls	r1, r3, #10
 800236a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800236e:	0290      	lsls	r0, r2, #10
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4610      	mov	r0, r2
 8002376:	4619      	mov	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	461a      	mov	r2, r3
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	f7fe fa7c 	bl	800087c <__aeabi_uldivmod>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4613      	mov	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	0c1b      	lsrs	r3, r3, #16
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	3301      	adds	r3, #1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	60bb      	str	r3, [r7, #8]
      break;
 80023a6:	e002      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023aa:	60bb      	str	r3, [r7, #8]
      break;
 80023ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ae:	68bb      	ldr	r3, [r7, #8]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	00f42400 	.word	0x00f42400
 80023c4:	007a1200 	.word	0x007a1200

080023c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_RCC_GetHCLKFreq+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000004 	.word	0x20000004

080023e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023e4:	f7ff fff0 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	0a9b      	lsrs	r3, r3, #10
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	4903      	ldr	r1, [pc, #12]	; (8002404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40023800 	.word	0x40023800
 8002404:	08002d7c 	.word	0x08002d7c

08002408 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	220f      	movs	r2, #15
 8002416:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_RCC_GetClockConfig+0x5c>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0203 	and.w	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_RCC_GetClockConfig+0x5c>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <HAL_RCC_GetClockConfig+0x5c>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_RCC_GetClockConfig+0x5c>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	08db      	lsrs	r3, r3, #3
 8002442:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <HAL_RCC_GetClockConfig+0x60>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0207 	and.w	r2, r3, #7
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	601a      	str	r2, [r3, #0]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800
 8002468:	40023c00 	.word	0x40023c00

0800246c <__errno>:
 800246c:	4b01      	ldr	r3, [pc, #4]	; (8002474 <__errno+0x8>)
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000010 	.word	0x20000010

08002478 <__libc_init_array>:
 8002478:	b570      	push	{r4, r5, r6, lr}
 800247a:	4d0d      	ldr	r5, [pc, #52]	; (80024b0 <__libc_init_array+0x38>)
 800247c:	4c0d      	ldr	r4, [pc, #52]	; (80024b4 <__libc_init_array+0x3c>)
 800247e:	1b64      	subs	r4, r4, r5
 8002480:	10a4      	asrs	r4, r4, #2
 8002482:	2600      	movs	r6, #0
 8002484:	42a6      	cmp	r6, r4
 8002486:	d109      	bne.n	800249c <__libc_init_array+0x24>
 8002488:	4d0b      	ldr	r5, [pc, #44]	; (80024b8 <__libc_init_array+0x40>)
 800248a:	4c0c      	ldr	r4, [pc, #48]	; (80024bc <__libc_init_array+0x44>)
 800248c:	f000 fc4e 	bl	8002d2c <_init>
 8002490:	1b64      	subs	r4, r4, r5
 8002492:	10a4      	asrs	r4, r4, #2
 8002494:	2600      	movs	r6, #0
 8002496:	42a6      	cmp	r6, r4
 8002498:	d105      	bne.n	80024a6 <__libc_init_array+0x2e>
 800249a:	bd70      	pop	{r4, r5, r6, pc}
 800249c:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a0:	4798      	blx	r3
 80024a2:	3601      	adds	r6, #1
 80024a4:	e7ee      	b.n	8002484 <__libc_init_array+0xc>
 80024a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024aa:	4798      	blx	r3
 80024ac:	3601      	adds	r6, #1
 80024ae:	e7f2      	b.n	8002496 <__libc_init_array+0x1e>
 80024b0:	08002dc0 	.word	0x08002dc0
 80024b4:	08002dc0 	.word	0x08002dc0
 80024b8:	08002dc0 	.word	0x08002dc0
 80024bc:	08002dc4 	.word	0x08002dc4

080024c0 <memset>:
 80024c0:	4402      	add	r2, r0
 80024c2:	4603      	mov	r3, r0
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d100      	bne.n	80024ca <memset+0xa>
 80024c8:	4770      	bx	lr
 80024ca:	f803 1b01 	strb.w	r1, [r3], #1
 80024ce:	e7f9      	b.n	80024c4 <memset+0x4>

080024d0 <siprintf>:
 80024d0:	b40e      	push	{r1, r2, r3}
 80024d2:	b500      	push	{lr}
 80024d4:	b09c      	sub	sp, #112	; 0x70
 80024d6:	ab1d      	add	r3, sp, #116	; 0x74
 80024d8:	9002      	str	r0, [sp, #8]
 80024da:	9006      	str	r0, [sp, #24]
 80024dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80024e0:	4809      	ldr	r0, [pc, #36]	; (8002508 <siprintf+0x38>)
 80024e2:	9107      	str	r1, [sp, #28]
 80024e4:	9104      	str	r1, [sp, #16]
 80024e6:	4909      	ldr	r1, [pc, #36]	; (800250c <siprintf+0x3c>)
 80024e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80024ec:	9105      	str	r1, [sp, #20]
 80024ee:	6800      	ldr	r0, [r0, #0]
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	a902      	add	r1, sp, #8
 80024f4:	f000 f868 	bl	80025c8 <_svfiprintf_r>
 80024f8:	9b02      	ldr	r3, [sp, #8]
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	b01c      	add	sp, #112	; 0x70
 8002500:	f85d eb04 	ldr.w	lr, [sp], #4
 8002504:	b003      	add	sp, #12
 8002506:	4770      	bx	lr
 8002508:	20000010 	.word	0x20000010
 800250c:	ffff0208 	.word	0xffff0208

08002510 <__ssputs_r>:
 8002510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002514:	688e      	ldr	r6, [r1, #8]
 8002516:	429e      	cmp	r6, r3
 8002518:	4682      	mov	sl, r0
 800251a:	460c      	mov	r4, r1
 800251c:	4690      	mov	r8, r2
 800251e:	461f      	mov	r7, r3
 8002520:	d838      	bhi.n	8002594 <__ssputs_r+0x84>
 8002522:	898a      	ldrh	r2, [r1, #12]
 8002524:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002528:	d032      	beq.n	8002590 <__ssputs_r+0x80>
 800252a:	6825      	ldr	r5, [r4, #0]
 800252c:	6909      	ldr	r1, [r1, #16]
 800252e:	eba5 0901 	sub.w	r9, r5, r1
 8002532:	6965      	ldr	r5, [r4, #20]
 8002534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002538:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800253c:	3301      	adds	r3, #1
 800253e:	444b      	add	r3, r9
 8002540:	106d      	asrs	r5, r5, #1
 8002542:	429d      	cmp	r5, r3
 8002544:	bf38      	it	cc
 8002546:	461d      	movcc	r5, r3
 8002548:	0553      	lsls	r3, r2, #21
 800254a:	d531      	bpl.n	80025b0 <__ssputs_r+0xa0>
 800254c:	4629      	mov	r1, r5
 800254e:	f000 fb47 	bl	8002be0 <_malloc_r>
 8002552:	4606      	mov	r6, r0
 8002554:	b950      	cbnz	r0, 800256c <__ssputs_r+0x5c>
 8002556:	230c      	movs	r3, #12
 8002558:	f8ca 3000 	str.w	r3, [sl]
 800255c:	89a3      	ldrh	r3, [r4, #12]
 800255e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002562:	81a3      	strh	r3, [r4, #12]
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800256c:	6921      	ldr	r1, [r4, #16]
 800256e:	464a      	mov	r2, r9
 8002570:	f000 fabe 	bl	8002af0 <memcpy>
 8002574:	89a3      	ldrh	r3, [r4, #12]
 8002576:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800257a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800257e:	81a3      	strh	r3, [r4, #12]
 8002580:	6126      	str	r6, [r4, #16]
 8002582:	6165      	str	r5, [r4, #20]
 8002584:	444e      	add	r6, r9
 8002586:	eba5 0509 	sub.w	r5, r5, r9
 800258a:	6026      	str	r6, [r4, #0]
 800258c:	60a5      	str	r5, [r4, #8]
 800258e:	463e      	mov	r6, r7
 8002590:	42be      	cmp	r6, r7
 8002592:	d900      	bls.n	8002596 <__ssputs_r+0x86>
 8002594:	463e      	mov	r6, r7
 8002596:	4632      	mov	r2, r6
 8002598:	6820      	ldr	r0, [r4, #0]
 800259a:	4641      	mov	r1, r8
 800259c:	f000 fab6 	bl	8002b0c <memmove>
 80025a0:	68a3      	ldr	r3, [r4, #8]
 80025a2:	6822      	ldr	r2, [r4, #0]
 80025a4:	1b9b      	subs	r3, r3, r6
 80025a6:	4432      	add	r2, r6
 80025a8:	60a3      	str	r3, [r4, #8]
 80025aa:	6022      	str	r2, [r4, #0]
 80025ac:	2000      	movs	r0, #0
 80025ae:	e7db      	b.n	8002568 <__ssputs_r+0x58>
 80025b0:	462a      	mov	r2, r5
 80025b2:	f000 fb6f 	bl	8002c94 <_realloc_r>
 80025b6:	4606      	mov	r6, r0
 80025b8:	2800      	cmp	r0, #0
 80025ba:	d1e1      	bne.n	8002580 <__ssputs_r+0x70>
 80025bc:	6921      	ldr	r1, [r4, #16]
 80025be:	4650      	mov	r0, sl
 80025c0:	f000 fabe 	bl	8002b40 <_free_r>
 80025c4:	e7c7      	b.n	8002556 <__ssputs_r+0x46>
	...

080025c8 <_svfiprintf_r>:
 80025c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025cc:	4698      	mov	r8, r3
 80025ce:	898b      	ldrh	r3, [r1, #12]
 80025d0:	061b      	lsls	r3, r3, #24
 80025d2:	b09d      	sub	sp, #116	; 0x74
 80025d4:	4607      	mov	r7, r0
 80025d6:	460d      	mov	r5, r1
 80025d8:	4614      	mov	r4, r2
 80025da:	d50e      	bpl.n	80025fa <_svfiprintf_r+0x32>
 80025dc:	690b      	ldr	r3, [r1, #16]
 80025de:	b963      	cbnz	r3, 80025fa <_svfiprintf_r+0x32>
 80025e0:	2140      	movs	r1, #64	; 0x40
 80025e2:	f000 fafd 	bl	8002be0 <_malloc_r>
 80025e6:	6028      	str	r0, [r5, #0]
 80025e8:	6128      	str	r0, [r5, #16]
 80025ea:	b920      	cbnz	r0, 80025f6 <_svfiprintf_r+0x2e>
 80025ec:	230c      	movs	r3, #12
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	e0d1      	b.n	800279a <_svfiprintf_r+0x1d2>
 80025f6:	2340      	movs	r3, #64	; 0x40
 80025f8:	616b      	str	r3, [r5, #20]
 80025fa:	2300      	movs	r3, #0
 80025fc:	9309      	str	r3, [sp, #36]	; 0x24
 80025fe:	2320      	movs	r3, #32
 8002600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002604:	f8cd 800c 	str.w	r8, [sp, #12]
 8002608:	2330      	movs	r3, #48	; 0x30
 800260a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80027b4 <_svfiprintf_r+0x1ec>
 800260e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002612:	f04f 0901 	mov.w	r9, #1
 8002616:	4623      	mov	r3, r4
 8002618:	469a      	mov	sl, r3
 800261a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800261e:	b10a      	cbz	r2, 8002624 <_svfiprintf_r+0x5c>
 8002620:	2a25      	cmp	r2, #37	; 0x25
 8002622:	d1f9      	bne.n	8002618 <_svfiprintf_r+0x50>
 8002624:	ebba 0b04 	subs.w	fp, sl, r4
 8002628:	d00b      	beq.n	8002642 <_svfiprintf_r+0x7a>
 800262a:	465b      	mov	r3, fp
 800262c:	4622      	mov	r2, r4
 800262e:	4629      	mov	r1, r5
 8002630:	4638      	mov	r0, r7
 8002632:	f7ff ff6d 	bl	8002510 <__ssputs_r>
 8002636:	3001      	adds	r0, #1
 8002638:	f000 80aa 	beq.w	8002790 <_svfiprintf_r+0x1c8>
 800263c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800263e:	445a      	add	r2, fp
 8002640:	9209      	str	r2, [sp, #36]	; 0x24
 8002642:	f89a 3000 	ldrb.w	r3, [sl]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80a2 	beq.w	8002790 <_svfiprintf_r+0x1c8>
 800264c:	2300      	movs	r3, #0
 800264e:	f04f 32ff 	mov.w	r2, #4294967295
 8002652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002656:	f10a 0a01 	add.w	sl, sl, #1
 800265a:	9304      	str	r3, [sp, #16]
 800265c:	9307      	str	r3, [sp, #28]
 800265e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002662:	931a      	str	r3, [sp, #104]	; 0x68
 8002664:	4654      	mov	r4, sl
 8002666:	2205      	movs	r2, #5
 8002668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800266c:	4851      	ldr	r0, [pc, #324]	; (80027b4 <_svfiprintf_r+0x1ec>)
 800266e:	f7fd fdaf 	bl	80001d0 <memchr>
 8002672:	9a04      	ldr	r2, [sp, #16]
 8002674:	b9d8      	cbnz	r0, 80026ae <_svfiprintf_r+0xe6>
 8002676:	06d0      	lsls	r0, r2, #27
 8002678:	bf44      	itt	mi
 800267a:	2320      	movmi	r3, #32
 800267c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002680:	0711      	lsls	r1, r2, #28
 8002682:	bf44      	itt	mi
 8002684:	232b      	movmi	r3, #43	; 0x2b
 8002686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800268a:	f89a 3000 	ldrb.w	r3, [sl]
 800268e:	2b2a      	cmp	r3, #42	; 0x2a
 8002690:	d015      	beq.n	80026be <_svfiprintf_r+0xf6>
 8002692:	9a07      	ldr	r2, [sp, #28]
 8002694:	4654      	mov	r4, sl
 8002696:	2000      	movs	r0, #0
 8002698:	f04f 0c0a 	mov.w	ip, #10
 800269c:	4621      	mov	r1, r4
 800269e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026a2:	3b30      	subs	r3, #48	; 0x30
 80026a4:	2b09      	cmp	r3, #9
 80026a6:	d94e      	bls.n	8002746 <_svfiprintf_r+0x17e>
 80026a8:	b1b0      	cbz	r0, 80026d8 <_svfiprintf_r+0x110>
 80026aa:	9207      	str	r2, [sp, #28]
 80026ac:	e014      	b.n	80026d8 <_svfiprintf_r+0x110>
 80026ae:	eba0 0308 	sub.w	r3, r0, r8
 80026b2:	fa09 f303 	lsl.w	r3, r9, r3
 80026b6:	4313      	orrs	r3, r2
 80026b8:	9304      	str	r3, [sp, #16]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	e7d2      	b.n	8002664 <_svfiprintf_r+0x9c>
 80026be:	9b03      	ldr	r3, [sp, #12]
 80026c0:	1d19      	adds	r1, r3, #4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	9103      	str	r1, [sp, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bfbb      	ittet	lt
 80026ca:	425b      	neglt	r3, r3
 80026cc:	f042 0202 	orrlt.w	r2, r2, #2
 80026d0:	9307      	strge	r3, [sp, #28]
 80026d2:	9307      	strlt	r3, [sp, #28]
 80026d4:	bfb8      	it	lt
 80026d6:	9204      	strlt	r2, [sp, #16]
 80026d8:	7823      	ldrb	r3, [r4, #0]
 80026da:	2b2e      	cmp	r3, #46	; 0x2e
 80026dc:	d10c      	bne.n	80026f8 <_svfiprintf_r+0x130>
 80026de:	7863      	ldrb	r3, [r4, #1]
 80026e0:	2b2a      	cmp	r3, #42	; 0x2a
 80026e2:	d135      	bne.n	8002750 <_svfiprintf_r+0x188>
 80026e4:	9b03      	ldr	r3, [sp, #12]
 80026e6:	1d1a      	adds	r2, r3, #4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	9203      	str	r2, [sp, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bfb8      	it	lt
 80026f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80026f4:	3402      	adds	r4, #2
 80026f6:	9305      	str	r3, [sp, #20]
 80026f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80027c4 <_svfiprintf_r+0x1fc>
 80026fc:	7821      	ldrb	r1, [r4, #0]
 80026fe:	2203      	movs	r2, #3
 8002700:	4650      	mov	r0, sl
 8002702:	f7fd fd65 	bl	80001d0 <memchr>
 8002706:	b140      	cbz	r0, 800271a <_svfiprintf_r+0x152>
 8002708:	2340      	movs	r3, #64	; 0x40
 800270a:	eba0 000a 	sub.w	r0, r0, sl
 800270e:	fa03 f000 	lsl.w	r0, r3, r0
 8002712:	9b04      	ldr	r3, [sp, #16]
 8002714:	4303      	orrs	r3, r0
 8002716:	3401      	adds	r4, #1
 8002718:	9304      	str	r3, [sp, #16]
 800271a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800271e:	4826      	ldr	r0, [pc, #152]	; (80027b8 <_svfiprintf_r+0x1f0>)
 8002720:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002724:	2206      	movs	r2, #6
 8002726:	f7fd fd53 	bl	80001d0 <memchr>
 800272a:	2800      	cmp	r0, #0
 800272c:	d038      	beq.n	80027a0 <_svfiprintf_r+0x1d8>
 800272e:	4b23      	ldr	r3, [pc, #140]	; (80027bc <_svfiprintf_r+0x1f4>)
 8002730:	bb1b      	cbnz	r3, 800277a <_svfiprintf_r+0x1b2>
 8002732:	9b03      	ldr	r3, [sp, #12]
 8002734:	3307      	adds	r3, #7
 8002736:	f023 0307 	bic.w	r3, r3, #7
 800273a:	3308      	adds	r3, #8
 800273c:	9303      	str	r3, [sp, #12]
 800273e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002740:	4433      	add	r3, r6
 8002742:	9309      	str	r3, [sp, #36]	; 0x24
 8002744:	e767      	b.n	8002616 <_svfiprintf_r+0x4e>
 8002746:	fb0c 3202 	mla	r2, ip, r2, r3
 800274a:	460c      	mov	r4, r1
 800274c:	2001      	movs	r0, #1
 800274e:	e7a5      	b.n	800269c <_svfiprintf_r+0xd4>
 8002750:	2300      	movs	r3, #0
 8002752:	3401      	adds	r4, #1
 8002754:	9305      	str	r3, [sp, #20]
 8002756:	4619      	mov	r1, r3
 8002758:	f04f 0c0a 	mov.w	ip, #10
 800275c:	4620      	mov	r0, r4
 800275e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002762:	3a30      	subs	r2, #48	; 0x30
 8002764:	2a09      	cmp	r2, #9
 8002766:	d903      	bls.n	8002770 <_svfiprintf_r+0x1a8>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0c5      	beq.n	80026f8 <_svfiprintf_r+0x130>
 800276c:	9105      	str	r1, [sp, #20]
 800276e:	e7c3      	b.n	80026f8 <_svfiprintf_r+0x130>
 8002770:	fb0c 2101 	mla	r1, ip, r1, r2
 8002774:	4604      	mov	r4, r0
 8002776:	2301      	movs	r3, #1
 8002778:	e7f0      	b.n	800275c <_svfiprintf_r+0x194>
 800277a:	ab03      	add	r3, sp, #12
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	462a      	mov	r2, r5
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <_svfiprintf_r+0x1f8>)
 8002782:	a904      	add	r1, sp, #16
 8002784:	4638      	mov	r0, r7
 8002786:	f3af 8000 	nop.w
 800278a:	1c42      	adds	r2, r0, #1
 800278c:	4606      	mov	r6, r0
 800278e:	d1d6      	bne.n	800273e <_svfiprintf_r+0x176>
 8002790:	89ab      	ldrh	r3, [r5, #12]
 8002792:	065b      	lsls	r3, r3, #25
 8002794:	f53f af2c 	bmi.w	80025f0 <_svfiprintf_r+0x28>
 8002798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800279a:	b01d      	add	sp, #116	; 0x74
 800279c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027a0:	ab03      	add	r3, sp, #12
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	462a      	mov	r2, r5
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <_svfiprintf_r+0x1f8>)
 80027a8:	a904      	add	r1, sp, #16
 80027aa:	4638      	mov	r0, r7
 80027ac:	f000 f87a 	bl	80028a4 <_printf_i>
 80027b0:	e7eb      	b.n	800278a <_svfiprintf_r+0x1c2>
 80027b2:	bf00      	nop
 80027b4:	08002d84 	.word	0x08002d84
 80027b8:	08002d8e 	.word	0x08002d8e
 80027bc:	00000000 	.word	0x00000000
 80027c0:	08002511 	.word	0x08002511
 80027c4:	08002d8a 	.word	0x08002d8a

080027c8 <_printf_common>:
 80027c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027cc:	4616      	mov	r6, r2
 80027ce:	4699      	mov	r9, r3
 80027d0:	688a      	ldr	r2, [r1, #8]
 80027d2:	690b      	ldr	r3, [r1, #16]
 80027d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027d8:	4293      	cmp	r3, r2
 80027da:	bfb8      	it	lt
 80027dc:	4613      	movlt	r3, r2
 80027de:	6033      	str	r3, [r6, #0]
 80027e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027e4:	4607      	mov	r7, r0
 80027e6:	460c      	mov	r4, r1
 80027e8:	b10a      	cbz	r2, 80027ee <_printf_common+0x26>
 80027ea:	3301      	adds	r3, #1
 80027ec:	6033      	str	r3, [r6, #0]
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	0699      	lsls	r1, r3, #26
 80027f2:	bf42      	ittt	mi
 80027f4:	6833      	ldrmi	r3, [r6, #0]
 80027f6:	3302      	addmi	r3, #2
 80027f8:	6033      	strmi	r3, [r6, #0]
 80027fa:	6825      	ldr	r5, [r4, #0]
 80027fc:	f015 0506 	ands.w	r5, r5, #6
 8002800:	d106      	bne.n	8002810 <_printf_common+0x48>
 8002802:	f104 0a19 	add.w	sl, r4, #25
 8002806:	68e3      	ldr	r3, [r4, #12]
 8002808:	6832      	ldr	r2, [r6, #0]
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	42ab      	cmp	r3, r5
 800280e:	dc26      	bgt.n	800285e <_printf_common+0x96>
 8002810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002814:	1e13      	subs	r3, r2, #0
 8002816:	6822      	ldr	r2, [r4, #0]
 8002818:	bf18      	it	ne
 800281a:	2301      	movne	r3, #1
 800281c:	0692      	lsls	r2, r2, #26
 800281e:	d42b      	bmi.n	8002878 <_printf_common+0xb0>
 8002820:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002824:	4649      	mov	r1, r9
 8002826:	4638      	mov	r0, r7
 8002828:	47c0      	blx	r8
 800282a:	3001      	adds	r0, #1
 800282c:	d01e      	beq.n	800286c <_printf_common+0xa4>
 800282e:	6823      	ldr	r3, [r4, #0]
 8002830:	68e5      	ldr	r5, [r4, #12]
 8002832:	6832      	ldr	r2, [r6, #0]
 8002834:	f003 0306 	and.w	r3, r3, #6
 8002838:	2b04      	cmp	r3, #4
 800283a:	bf08      	it	eq
 800283c:	1aad      	subeq	r5, r5, r2
 800283e:	68a3      	ldr	r3, [r4, #8]
 8002840:	6922      	ldr	r2, [r4, #16]
 8002842:	bf0c      	ite	eq
 8002844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002848:	2500      	movne	r5, #0
 800284a:	4293      	cmp	r3, r2
 800284c:	bfc4      	itt	gt
 800284e:	1a9b      	subgt	r3, r3, r2
 8002850:	18ed      	addgt	r5, r5, r3
 8002852:	2600      	movs	r6, #0
 8002854:	341a      	adds	r4, #26
 8002856:	42b5      	cmp	r5, r6
 8002858:	d11a      	bne.n	8002890 <_printf_common+0xc8>
 800285a:	2000      	movs	r0, #0
 800285c:	e008      	b.n	8002870 <_printf_common+0xa8>
 800285e:	2301      	movs	r3, #1
 8002860:	4652      	mov	r2, sl
 8002862:	4649      	mov	r1, r9
 8002864:	4638      	mov	r0, r7
 8002866:	47c0      	blx	r8
 8002868:	3001      	adds	r0, #1
 800286a:	d103      	bne.n	8002874 <_printf_common+0xac>
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002874:	3501      	adds	r5, #1
 8002876:	e7c6      	b.n	8002806 <_printf_common+0x3e>
 8002878:	18e1      	adds	r1, r4, r3
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	2030      	movs	r0, #48	; 0x30
 800287e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002882:	4422      	add	r2, r4
 8002884:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002888:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800288c:	3302      	adds	r3, #2
 800288e:	e7c7      	b.n	8002820 <_printf_common+0x58>
 8002890:	2301      	movs	r3, #1
 8002892:	4622      	mov	r2, r4
 8002894:	4649      	mov	r1, r9
 8002896:	4638      	mov	r0, r7
 8002898:	47c0      	blx	r8
 800289a:	3001      	adds	r0, #1
 800289c:	d0e6      	beq.n	800286c <_printf_common+0xa4>
 800289e:	3601      	adds	r6, #1
 80028a0:	e7d9      	b.n	8002856 <_printf_common+0x8e>
	...

080028a4 <_printf_i>:
 80028a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028a8:	460c      	mov	r4, r1
 80028aa:	4691      	mov	r9, r2
 80028ac:	7e27      	ldrb	r7, [r4, #24]
 80028ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80028b0:	2f78      	cmp	r7, #120	; 0x78
 80028b2:	4680      	mov	r8, r0
 80028b4:	469a      	mov	sl, r3
 80028b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028ba:	d807      	bhi.n	80028cc <_printf_i+0x28>
 80028bc:	2f62      	cmp	r7, #98	; 0x62
 80028be:	d80a      	bhi.n	80028d6 <_printf_i+0x32>
 80028c0:	2f00      	cmp	r7, #0
 80028c2:	f000 80d8 	beq.w	8002a76 <_printf_i+0x1d2>
 80028c6:	2f58      	cmp	r7, #88	; 0x58
 80028c8:	f000 80a3 	beq.w	8002a12 <_printf_i+0x16e>
 80028cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80028d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028d4:	e03a      	b.n	800294c <_printf_i+0xa8>
 80028d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028da:	2b15      	cmp	r3, #21
 80028dc:	d8f6      	bhi.n	80028cc <_printf_i+0x28>
 80028de:	a001      	add	r0, pc, #4	; (adr r0, 80028e4 <_printf_i+0x40>)
 80028e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80028e4:	0800293d 	.word	0x0800293d
 80028e8:	08002951 	.word	0x08002951
 80028ec:	080028cd 	.word	0x080028cd
 80028f0:	080028cd 	.word	0x080028cd
 80028f4:	080028cd 	.word	0x080028cd
 80028f8:	080028cd 	.word	0x080028cd
 80028fc:	08002951 	.word	0x08002951
 8002900:	080028cd 	.word	0x080028cd
 8002904:	080028cd 	.word	0x080028cd
 8002908:	080028cd 	.word	0x080028cd
 800290c:	080028cd 	.word	0x080028cd
 8002910:	08002a5d 	.word	0x08002a5d
 8002914:	08002981 	.word	0x08002981
 8002918:	08002a3f 	.word	0x08002a3f
 800291c:	080028cd 	.word	0x080028cd
 8002920:	080028cd 	.word	0x080028cd
 8002924:	08002a7f 	.word	0x08002a7f
 8002928:	080028cd 	.word	0x080028cd
 800292c:	08002981 	.word	0x08002981
 8002930:	080028cd 	.word	0x080028cd
 8002934:	080028cd 	.word	0x080028cd
 8002938:	08002a47 	.word	0x08002a47
 800293c:	680b      	ldr	r3, [r1, #0]
 800293e:	1d1a      	adds	r2, r3, #4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	600a      	str	r2, [r1, #0]
 8002944:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800294c:	2301      	movs	r3, #1
 800294e:	e0a3      	b.n	8002a98 <_printf_i+0x1f4>
 8002950:	6825      	ldr	r5, [r4, #0]
 8002952:	6808      	ldr	r0, [r1, #0]
 8002954:	062e      	lsls	r6, r5, #24
 8002956:	f100 0304 	add.w	r3, r0, #4
 800295a:	d50a      	bpl.n	8002972 <_printf_i+0xce>
 800295c:	6805      	ldr	r5, [r0, #0]
 800295e:	600b      	str	r3, [r1, #0]
 8002960:	2d00      	cmp	r5, #0
 8002962:	da03      	bge.n	800296c <_printf_i+0xc8>
 8002964:	232d      	movs	r3, #45	; 0x2d
 8002966:	426d      	negs	r5, r5
 8002968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800296c:	485e      	ldr	r0, [pc, #376]	; (8002ae8 <_printf_i+0x244>)
 800296e:	230a      	movs	r3, #10
 8002970:	e019      	b.n	80029a6 <_printf_i+0x102>
 8002972:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002976:	6805      	ldr	r5, [r0, #0]
 8002978:	600b      	str	r3, [r1, #0]
 800297a:	bf18      	it	ne
 800297c:	b22d      	sxthne	r5, r5
 800297e:	e7ef      	b.n	8002960 <_printf_i+0xbc>
 8002980:	680b      	ldr	r3, [r1, #0]
 8002982:	6825      	ldr	r5, [r4, #0]
 8002984:	1d18      	adds	r0, r3, #4
 8002986:	6008      	str	r0, [r1, #0]
 8002988:	0628      	lsls	r0, r5, #24
 800298a:	d501      	bpl.n	8002990 <_printf_i+0xec>
 800298c:	681d      	ldr	r5, [r3, #0]
 800298e:	e002      	b.n	8002996 <_printf_i+0xf2>
 8002990:	0669      	lsls	r1, r5, #25
 8002992:	d5fb      	bpl.n	800298c <_printf_i+0xe8>
 8002994:	881d      	ldrh	r5, [r3, #0]
 8002996:	4854      	ldr	r0, [pc, #336]	; (8002ae8 <_printf_i+0x244>)
 8002998:	2f6f      	cmp	r7, #111	; 0x6f
 800299a:	bf0c      	ite	eq
 800299c:	2308      	moveq	r3, #8
 800299e:	230a      	movne	r3, #10
 80029a0:	2100      	movs	r1, #0
 80029a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029a6:	6866      	ldr	r6, [r4, #4]
 80029a8:	60a6      	str	r6, [r4, #8]
 80029aa:	2e00      	cmp	r6, #0
 80029ac:	bfa2      	ittt	ge
 80029ae:	6821      	ldrge	r1, [r4, #0]
 80029b0:	f021 0104 	bicge.w	r1, r1, #4
 80029b4:	6021      	strge	r1, [r4, #0]
 80029b6:	b90d      	cbnz	r5, 80029bc <_printf_i+0x118>
 80029b8:	2e00      	cmp	r6, #0
 80029ba:	d04d      	beq.n	8002a58 <_printf_i+0x1b4>
 80029bc:	4616      	mov	r6, r2
 80029be:	fbb5 f1f3 	udiv	r1, r5, r3
 80029c2:	fb03 5711 	mls	r7, r3, r1, r5
 80029c6:	5dc7      	ldrb	r7, [r0, r7]
 80029c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80029cc:	462f      	mov	r7, r5
 80029ce:	42bb      	cmp	r3, r7
 80029d0:	460d      	mov	r5, r1
 80029d2:	d9f4      	bls.n	80029be <_printf_i+0x11a>
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d10b      	bne.n	80029f0 <_printf_i+0x14c>
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	07df      	lsls	r7, r3, #31
 80029dc:	d508      	bpl.n	80029f0 <_printf_i+0x14c>
 80029de:	6923      	ldr	r3, [r4, #16]
 80029e0:	6861      	ldr	r1, [r4, #4]
 80029e2:	4299      	cmp	r1, r3
 80029e4:	bfde      	ittt	le
 80029e6:	2330      	movle	r3, #48	; 0x30
 80029e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80029ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80029f0:	1b92      	subs	r2, r2, r6
 80029f2:	6122      	str	r2, [r4, #16]
 80029f4:	f8cd a000 	str.w	sl, [sp]
 80029f8:	464b      	mov	r3, r9
 80029fa:	aa03      	add	r2, sp, #12
 80029fc:	4621      	mov	r1, r4
 80029fe:	4640      	mov	r0, r8
 8002a00:	f7ff fee2 	bl	80027c8 <_printf_common>
 8002a04:	3001      	adds	r0, #1
 8002a06:	d14c      	bne.n	8002aa2 <_printf_i+0x1fe>
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295
 8002a0c:	b004      	add	sp, #16
 8002a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a12:	4835      	ldr	r0, [pc, #212]	; (8002ae8 <_printf_i+0x244>)
 8002a14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	680e      	ldr	r6, [r1, #0]
 8002a1c:	061f      	lsls	r7, r3, #24
 8002a1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002a22:	600e      	str	r6, [r1, #0]
 8002a24:	d514      	bpl.n	8002a50 <_printf_i+0x1ac>
 8002a26:	07d9      	lsls	r1, r3, #31
 8002a28:	bf44      	itt	mi
 8002a2a:	f043 0320 	orrmi.w	r3, r3, #32
 8002a2e:	6023      	strmi	r3, [r4, #0]
 8002a30:	b91d      	cbnz	r5, 8002a3a <_printf_i+0x196>
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	f023 0320 	bic.w	r3, r3, #32
 8002a38:	6023      	str	r3, [r4, #0]
 8002a3a:	2310      	movs	r3, #16
 8002a3c:	e7b0      	b.n	80029a0 <_printf_i+0xfc>
 8002a3e:	6823      	ldr	r3, [r4, #0]
 8002a40:	f043 0320 	orr.w	r3, r3, #32
 8002a44:	6023      	str	r3, [r4, #0]
 8002a46:	2378      	movs	r3, #120	; 0x78
 8002a48:	4828      	ldr	r0, [pc, #160]	; (8002aec <_printf_i+0x248>)
 8002a4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a4e:	e7e3      	b.n	8002a18 <_printf_i+0x174>
 8002a50:	065e      	lsls	r6, r3, #25
 8002a52:	bf48      	it	mi
 8002a54:	b2ad      	uxthmi	r5, r5
 8002a56:	e7e6      	b.n	8002a26 <_printf_i+0x182>
 8002a58:	4616      	mov	r6, r2
 8002a5a:	e7bb      	b.n	80029d4 <_printf_i+0x130>
 8002a5c:	680b      	ldr	r3, [r1, #0]
 8002a5e:	6826      	ldr	r6, [r4, #0]
 8002a60:	6960      	ldr	r0, [r4, #20]
 8002a62:	1d1d      	adds	r5, r3, #4
 8002a64:	600d      	str	r5, [r1, #0]
 8002a66:	0635      	lsls	r5, r6, #24
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	d501      	bpl.n	8002a70 <_printf_i+0x1cc>
 8002a6c:	6018      	str	r0, [r3, #0]
 8002a6e:	e002      	b.n	8002a76 <_printf_i+0x1d2>
 8002a70:	0671      	lsls	r1, r6, #25
 8002a72:	d5fb      	bpl.n	8002a6c <_printf_i+0x1c8>
 8002a74:	8018      	strh	r0, [r3, #0]
 8002a76:	2300      	movs	r3, #0
 8002a78:	6123      	str	r3, [r4, #16]
 8002a7a:	4616      	mov	r6, r2
 8002a7c:	e7ba      	b.n	80029f4 <_printf_i+0x150>
 8002a7e:	680b      	ldr	r3, [r1, #0]
 8002a80:	1d1a      	adds	r2, r3, #4
 8002a82:	600a      	str	r2, [r1, #0]
 8002a84:	681e      	ldr	r6, [r3, #0]
 8002a86:	6862      	ldr	r2, [r4, #4]
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4630      	mov	r0, r6
 8002a8c:	f7fd fba0 	bl	80001d0 <memchr>
 8002a90:	b108      	cbz	r0, 8002a96 <_printf_i+0x1f2>
 8002a92:	1b80      	subs	r0, r0, r6
 8002a94:	6060      	str	r0, [r4, #4]
 8002a96:	6863      	ldr	r3, [r4, #4]
 8002a98:	6123      	str	r3, [r4, #16]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aa0:	e7a8      	b.n	80029f4 <_printf_i+0x150>
 8002aa2:	6923      	ldr	r3, [r4, #16]
 8002aa4:	4632      	mov	r2, r6
 8002aa6:	4649      	mov	r1, r9
 8002aa8:	4640      	mov	r0, r8
 8002aaa:	47d0      	blx	sl
 8002aac:	3001      	adds	r0, #1
 8002aae:	d0ab      	beq.n	8002a08 <_printf_i+0x164>
 8002ab0:	6823      	ldr	r3, [r4, #0]
 8002ab2:	079b      	lsls	r3, r3, #30
 8002ab4:	d413      	bmi.n	8002ade <_printf_i+0x23a>
 8002ab6:	68e0      	ldr	r0, [r4, #12]
 8002ab8:	9b03      	ldr	r3, [sp, #12]
 8002aba:	4298      	cmp	r0, r3
 8002abc:	bfb8      	it	lt
 8002abe:	4618      	movlt	r0, r3
 8002ac0:	e7a4      	b.n	8002a0c <_printf_i+0x168>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	4632      	mov	r2, r6
 8002ac6:	4649      	mov	r1, r9
 8002ac8:	4640      	mov	r0, r8
 8002aca:	47d0      	blx	sl
 8002acc:	3001      	adds	r0, #1
 8002ace:	d09b      	beq.n	8002a08 <_printf_i+0x164>
 8002ad0:	3501      	adds	r5, #1
 8002ad2:	68e3      	ldr	r3, [r4, #12]
 8002ad4:	9903      	ldr	r1, [sp, #12]
 8002ad6:	1a5b      	subs	r3, r3, r1
 8002ad8:	42ab      	cmp	r3, r5
 8002ada:	dcf2      	bgt.n	8002ac2 <_printf_i+0x21e>
 8002adc:	e7eb      	b.n	8002ab6 <_printf_i+0x212>
 8002ade:	2500      	movs	r5, #0
 8002ae0:	f104 0619 	add.w	r6, r4, #25
 8002ae4:	e7f5      	b.n	8002ad2 <_printf_i+0x22e>
 8002ae6:	bf00      	nop
 8002ae8:	08002d95 	.word	0x08002d95
 8002aec:	08002da6 	.word	0x08002da6

08002af0 <memcpy>:
 8002af0:	440a      	add	r2, r1
 8002af2:	4291      	cmp	r1, r2
 8002af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002af8:	d100      	bne.n	8002afc <memcpy+0xc>
 8002afa:	4770      	bx	lr
 8002afc:	b510      	push	{r4, lr}
 8002afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b06:	4291      	cmp	r1, r2
 8002b08:	d1f9      	bne.n	8002afe <memcpy+0xe>
 8002b0a:	bd10      	pop	{r4, pc}

08002b0c <memmove>:
 8002b0c:	4288      	cmp	r0, r1
 8002b0e:	b510      	push	{r4, lr}
 8002b10:	eb01 0402 	add.w	r4, r1, r2
 8002b14:	d902      	bls.n	8002b1c <memmove+0x10>
 8002b16:	4284      	cmp	r4, r0
 8002b18:	4623      	mov	r3, r4
 8002b1a:	d807      	bhi.n	8002b2c <memmove+0x20>
 8002b1c:	1e43      	subs	r3, r0, #1
 8002b1e:	42a1      	cmp	r1, r4
 8002b20:	d008      	beq.n	8002b34 <memmove+0x28>
 8002b22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b2a:	e7f8      	b.n	8002b1e <memmove+0x12>
 8002b2c:	4402      	add	r2, r0
 8002b2e:	4601      	mov	r1, r0
 8002b30:	428a      	cmp	r2, r1
 8002b32:	d100      	bne.n	8002b36 <memmove+0x2a>
 8002b34:	bd10      	pop	{r4, pc}
 8002b36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b3e:	e7f7      	b.n	8002b30 <memmove+0x24>

08002b40 <_free_r>:
 8002b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b42:	2900      	cmp	r1, #0
 8002b44:	d048      	beq.n	8002bd8 <_free_r+0x98>
 8002b46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b4a:	9001      	str	r0, [sp, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f1a1 0404 	sub.w	r4, r1, #4
 8002b52:	bfb8      	it	lt
 8002b54:	18e4      	addlt	r4, r4, r3
 8002b56:	f000 f8d3 	bl	8002d00 <__malloc_lock>
 8002b5a:	4a20      	ldr	r2, [pc, #128]	; (8002bdc <_free_r+0x9c>)
 8002b5c:	9801      	ldr	r0, [sp, #4]
 8002b5e:	6813      	ldr	r3, [r2, #0]
 8002b60:	4615      	mov	r5, r2
 8002b62:	b933      	cbnz	r3, 8002b72 <_free_r+0x32>
 8002b64:	6063      	str	r3, [r4, #4]
 8002b66:	6014      	str	r4, [r2, #0]
 8002b68:	b003      	add	sp, #12
 8002b6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b6e:	f000 b8cd 	b.w	8002d0c <__malloc_unlock>
 8002b72:	42a3      	cmp	r3, r4
 8002b74:	d90b      	bls.n	8002b8e <_free_r+0x4e>
 8002b76:	6821      	ldr	r1, [r4, #0]
 8002b78:	1862      	adds	r2, r4, r1
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	bf04      	itt	eq
 8002b7e:	681a      	ldreq	r2, [r3, #0]
 8002b80:	685b      	ldreq	r3, [r3, #4]
 8002b82:	6063      	str	r3, [r4, #4]
 8002b84:	bf04      	itt	eq
 8002b86:	1852      	addeq	r2, r2, r1
 8002b88:	6022      	streq	r2, [r4, #0]
 8002b8a:	602c      	str	r4, [r5, #0]
 8002b8c:	e7ec      	b.n	8002b68 <_free_r+0x28>
 8002b8e:	461a      	mov	r2, r3
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	b10b      	cbz	r3, 8002b98 <_free_r+0x58>
 8002b94:	42a3      	cmp	r3, r4
 8002b96:	d9fa      	bls.n	8002b8e <_free_r+0x4e>
 8002b98:	6811      	ldr	r1, [r2, #0]
 8002b9a:	1855      	adds	r5, r2, r1
 8002b9c:	42a5      	cmp	r5, r4
 8002b9e:	d10b      	bne.n	8002bb8 <_free_r+0x78>
 8002ba0:	6824      	ldr	r4, [r4, #0]
 8002ba2:	4421      	add	r1, r4
 8002ba4:	1854      	adds	r4, r2, r1
 8002ba6:	42a3      	cmp	r3, r4
 8002ba8:	6011      	str	r1, [r2, #0]
 8002baa:	d1dd      	bne.n	8002b68 <_free_r+0x28>
 8002bac:	681c      	ldr	r4, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	6053      	str	r3, [r2, #4]
 8002bb2:	4421      	add	r1, r4
 8002bb4:	6011      	str	r1, [r2, #0]
 8002bb6:	e7d7      	b.n	8002b68 <_free_r+0x28>
 8002bb8:	d902      	bls.n	8002bc0 <_free_r+0x80>
 8002bba:	230c      	movs	r3, #12
 8002bbc:	6003      	str	r3, [r0, #0]
 8002bbe:	e7d3      	b.n	8002b68 <_free_r+0x28>
 8002bc0:	6825      	ldr	r5, [r4, #0]
 8002bc2:	1961      	adds	r1, r4, r5
 8002bc4:	428b      	cmp	r3, r1
 8002bc6:	bf04      	itt	eq
 8002bc8:	6819      	ldreq	r1, [r3, #0]
 8002bca:	685b      	ldreq	r3, [r3, #4]
 8002bcc:	6063      	str	r3, [r4, #4]
 8002bce:	bf04      	itt	eq
 8002bd0:	1949      	addeq	r1, r1, r5
 8002bd2:	6021      	streq	r1, [r4, #0]
 8002bd4:	6054      	str	r4, [r2, #4]
 8002bd6:	e7c7      	b.n	8002b68 <_free_r+0x28>
 8002bd8:	b003      	add	sp, #12
 8002bda:	bd30      	pop	{r4, r5, pc}
 8002bdc:	200000b4 	.word	0x200000b4

08002be0 <_malloc_r>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	1ccd      	adds	r5, r1, #3
 8002be4:	f025 0503 	bic.w	r5, r5, #3
 8002be8:	3508      	adds	r5, #8
 8002bea:	2d0c      	cmp	r5, #12
 8002bec:	bf38      	it	cc
 8002bee:	250c      	movcc	r5, #12
 8002bf0:	2d00      	cmp	r5, #0
 8002bf2:	4606      	mov	r6, r0
 8002bf4:	db01      	blt.n	8002bfa <_malloc_r+0x1a>
 8002bf6:	42a9      	cmp	r1, r5
 8002bf8:	d903      	bls.n	8002c02 <_malloc_r+0x22>
 8002bfa:	230c      	movs	r3, #12
 8002bfc:	6033      	str	r3, [r6, #0]
 8002bfe:	2000      	movs	r0, #0
 8002c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c02:	f000 f87d 	bl	8002d00 <__malloc_lock>
 8002c06:	4921      	ldr	r1, [pc, #132]	; (8002c8c <_malloc_r+0xac>)
 8002c08:	680a      	ldr	r2, [r1, #0]
 8002c0a:	4614      	mov	r4, r2
 8002c0c:	b99c      	cbnz	r4, 8002c36 <_malloc_r+0x56>
 8002c0e:	4f20      	ldr	r7, [pc, #128]	; (8002c90 <_malloc_r+0xb0>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	b923      	cbnz	r3, 8002c1e <_malloc_r+0x3e>
 8002c14:	4621      	mov	r1, r4
 8002c16:	4630      	mov	r0, r6
 8002c18:	f000 f862 	bl	8002ce0 <_sbrk_r>
 8002c1c:	6038      	str	r0, [r7, #0]
 8002c1e:	4629      	mov	r1, r5
 8002c20:	4630      	mov	r0, r6
 8002c22:	f000 f85d 	bl	8002ce0 <_sbrk_r>
 8002c26:	1c43      	adds	r3, r0, #1
 8002c28:	d123      	bne.n	8002c72 <_malloc_r+0x92>
 8002c2a:	230c      	movs	r3, #12
 8002c2c:	6033      	str	r3, [r6, #0]
 8002c2e:	4630      	mov	r0, r6
 8002c30:	f000 f86c 	bl	8002d0c <__malloc_unlock>
 8002c34:	e7e3      	b.n	8002bfe <_malloc_r+0x1e>
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	1b5b      	subs	r3, r3, r5
 8002c3a:	d417      	bmi.n	8002c6c <_malloc_r+0x8c>
 8002c3c:	2b0b      	cmp	r3, #11
 8002c3e:	d903      	bls.n	8002c48 <_malloc_r+0x68>
 8002c40:	6023      	str	r3, [r4, #0]
 8002c42:	441c      	add	r4, r3
 8002c44:	6025      	str	r5, [r4, #0]
 8002c46:	e004      	b.n	8002c52 <_malloc_r+0x72>
 8002c48:	6863      	ldr	r3, [r4, #4]
 8002c4a:	42a2      	cmp	r2, r4
 8002c4c:	bf0c      	ite	eq
 8002c4e:	600b      	streq	r3, [r1, #0]
 8002c50:	6053      	strne	r3, [r2, #4]
 8002c52:	4630      	mov	r0, r6
 8002c54:	f000 f85a 	bl	8002d0c <__malloc_unlock>
 8002c58:	f104 000b 	add.w	r0, r4, #11
 8002c5c:	1d23      	adds	r3, r4, #4
 8002c5e:	f020 0007 	bic.w	r0, r0, #7
 8002c62:	1ac2      	subs	r2, r0, r3
 8002c64:	d0cc      	beq.n	8002c00 <_malloc_r+0x20>
 8002c66:	1a1b      	subs	r3, r3, r0
 8002c68:	50a3      	str	r3, [r4, r2]
 8002c6a:	e7c9      	b.n	8002c00 <_malloc_r+0x20>
 8002c6c:	4622      	mov	r2, r4
 8002c6e:	6864      	ldr	r4, [r4, #4]
 8002c70:	e7cc      	b.n	8002c0c <_malloc_r+0x2c>
 8002c72:	1cc4      	adds	r4, r0, #3
 8002c74:	f024 0403 	bic.w	r4, r4, #3
 8002c78:	42a0      	cmp	r0, r4
 8002c7a:	d0e3      	beq.n	8002c44 <_malloc_r+0x64>
 8002c7c:	1a21      	subs	r1, r4, r0
 8002c7e:	4630      	mov	r0, r6
 8002c80:	f000 f82e 	bl	8002ce0 <_sbrk_r>
 8002c84:	3001      	adds	r0, #1
 8002c86:	d1dd      	bne.n	8002c44 <_malloc_r+0x64>
 8002c88:	e7cf      	b.n	8002c2a <_malloc_r+0x4a>
 8002c8a:	bf00      	nop
 8002c8c:	200000b4 	.word	0x200000b4
 8002c90:	200000b8 	.word	0x200000b8

08002c94 <_realloc_r>:
 8002c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c96:	4607      	mov	r7, r0
 8002c98:	4614      	mov	r4, r2
 8002c9a:	460e      	mov	r6, r1
 8002c9c:	b921      	cbnz	r1, 8002ca8 <_realloc_r+0x14>
 8002c9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	f7ff bf9c 	b.w	8002be0 <_malloc_r>
 8002ca8:	b922      	cbnz	r2, 8002cb4 <_realloc_r+0x20>
 8002caa:	f7ff ff49 	bl	8002b40 <_free_r>
 8002cae:	4625      	mov	r5, r4
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cb4:	f000 f830 	bl	8002d18 <_malloc_usable_size_r>
 8002cb8:	42a0      	cmp	r0, r4
 8002cba:	d20f      	bcs.n	8002cdc <_realloc_r+0x48>
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	4638      	mov	r0, r7
 8002cc0:	f7ff ff8e 	bl	8002be0 <_malloc_r>
 8002cc4:	4605      	mov	r5, r0
 8002cc6:	2800      	cmp	r0, #0
 8002cc8:	d0f2      	beq.n	8002cb0 <_realloc_r+0x1c>
 8002cca:	4631      	mov	r1, r6
 8002ccc:	4622      	mov	r2, r4
 8002cce:	f7ff ff0f 	bl	8002af0 <memcpy>
 8002cd2:	4631      	mov	r1, r6
 8002cd4:	4638      	mov	r0, r7
 8002cd6:	f7ff ff33 	bl	8002b40 <_free_r>
 8002cda:	e7e9      	b.n	8002cb0 <_realloc_r+0x1c>
 8002cdc:	4635      	mov	r5, r6
 8002cde:	e7e7      	b.n	8002cb0 <_realloc_r+0x1c>

08002ce0 <_sbrk_r>:
 8002ce0:	b538      	push	{r3, r4, r5, lr}
 8002ce2:	4d06      	ldr	r5, [pc, #24]	; (8002cfc <_sbrk_r+0x1c>)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	4608      	mov	r0, r1
 8002cea:	602b      	str	r3, [r5, #0]
 8002cec:	f7fe fb88 	bl	8001400 <_sbrk>
 8002cf0:	1c43      	adds	r3, r0, #1
 8002cf2:	d102      	bne.n	8002cfa <_sbrk_r+0x1a>
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	b103      	cbz	r3, 8002cfa <_sbrk_r+0x1a>
 8002cf8:	6023      	str	r3, [r4, #0]
 8002cfa:	bd38      	pop	{r3, r4, r5, pc}
 8002cfc:	200000c0 	.word	0x200000c0

08002d00 <__malloc_lock>:
 8002d00:	4801      	ldr	r0, [pc, #4]	; (8002d08 <__malloc_lock+0x8>)
 8002d02:	f000 b811 	b.w	8002d28 <__retarget_lock_acquire_recursive>
 8002d06:	bf00      	nop
 8002d08:	200000c8 	.word	0x200000c8

08002d0c <__malloc_unlock>:
 8002d0c:	4801      	ldr	r0, [pc, #4]	; (8002d14 <__malloc_unlock+0x8>)
 8002d0e:	f000 b80c 	b.w	8002d2a <__retarget_lock_release_recursive>
 8002d12:	bf00      	nop
 8002d14:	200000c8 	.word	0x200000c8

08002d18 <_malloc_usable_size_r>:
 8002d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d1c:	1f18      	subs	r0, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	bfbc      	itt	lt
 8002d22:	580b      	ldrlt	r3, [r1, r0]
 8002d24:	18c0      	addlt	r0, r0, r3
 8002d26:	4770      	bx	lr

08002d28 <__retarget_lock_acquire_recursive>:
 8002d28:	4770      	bx	lr

08002d2a <__retarget_lock_release_recursive>:
 8002d2a:	4770      	bx	lr

08002d2c <_init>:
 8002d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2e:	bf00      	nop
 8002d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d32:	bc08      	pop	{r3}
 8002d34:	469e      	mov	lr, r3
 8002d36:	4770      	bx	lr

08002d38 <_fini>:
 8002d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3a:	bf00      	nop
 8002d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3e:	bc08      	pop	{r3}
 8002d40:	469e      	mov	lr, r3
 8002d42:	4770      	bx	lr
